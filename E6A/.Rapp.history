## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
quartz("",11,5)#
par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 1:#
segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=4)#
points(rep(xcor[1],10),400+random_intercepts,pch=20)#
points(rep(xcor[2],10),350+random_intercepts,pch=20)#
## Sub-plot 2, with random slopes:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 2:#
segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts+random_slopes1,y1=350+random_intercepts+random_slopes2,lty=4)#
points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
## Sub-plot 3, with shrinkage:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("With shrinkage",side=1,line=5.5,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 3:#
segments(x0=xcor[1],x1=xcor[2],#
	y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=4)#
points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
quartz("",11,5)#
par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 1:#
segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=4)#
points(rep(xcor[1],10),400+random_intercepts,pch=20)#
points(rep(xcor[2],10),350+random_intercepts,pch=20)#
## Sub-plot 2, with random slopes:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 2:#
segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts+random_slopes1,y1=350+random_intercepts+random_slopes2,lty=4)#
points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
## Sub-plot 3, with shrinkage:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 3:#
segments(x0=xcor[1],x1=xcor[2],#
	y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=4)#
points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
quartz("",11,5)#
par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 1:#
segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
points(rep(xcor[1],10),400+random_intercepts,pch=20)#
points(rep(xcor[2],10),350+random_intercepts,pch=20)#
## Sub-plot 2, with random slopes:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 2:#
segments(x0=xcor[1],x1=xcor[2],#
	y0=400+random_intercepts+random_slopes1,#
	y1=350+random_intercepts+random_slopes2,lty=linetype)#
points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
## Sub-plot 3, with shrinkage:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
## Adding schematic random intercepts to sub-plot 3:#
segments(x0=xcor[1],x1=xcor[2],#
	y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)
quartz("",11,5)#
par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)
quartz("",5,6)#
par(mai=c(1.8,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",5,6)#
par(mai=c(1.8,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",5,6)#
par(mai=c(1.2,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",5,6)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",6,6)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,6)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
points(xcor,c(400,350),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4)#
points(xcor,c(440,480),pch=19,cex=2.5)
?points
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4)#
points(xcor,c(440,480),pch=17,cex=2.5)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding#
arrows(x0=xcor[1],y0=390,y1=430,length=0.2,code=3)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding#
arrows(x0=xcor[1],y0=390,y1=430,length=0.1,code=3)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw
mean(380,440)
mean(c(380,440))
mean(c(330,480))
mean(c(440,480))
mean(c(380,330))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355,y1=460,length=0.15,code=3,lwd=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+15,y1=460-15,length=0.15,code=3,lwd=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,4)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",8,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)
quartz("",7a,5)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend("bottomright",lwd=2,lty=c(1,2),pch=c(19,17))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend("bottomright",lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=270,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=290,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.5)
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.25)
mean(c(380,440))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.25)#
## Draw in text:#
text(x=0.35,y=410,"Treatment coding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.25)#
## Draw in text:#
text(x=0.35,y=410,"Treatment\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.35,y=410,"Treatment\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.30,y=410,"Treatment\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.32,y=410,"Treatment\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")
mean(c(330,440))
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")#
text(x=0.33,y=385,"Sum\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")#
text(x=1.33,y=385,"Sum\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")#
text(x=1.33,y=410,"Sum\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")#
text(x=1,y=410,"Sum\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")#
text(x=1.10,y=410,"Sum\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")#
text(x=1-0.33,y=410,"Sum\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Treatment\ncoding")#
text(x=0.9,y=410,"Sum\ncoding")
## Bodo Winter#
## August 5, 2014#
## Graphs for best practices paper#
#
emptyplot=function(x,y,xaxt="n",yaxt="n",ylab="",xlab="",type="n",main="",...){#
	plot(x,y,xaxt=xaxt,yaxt=yaxt,ylab=ylab,xlab=xlab,type=type,main=main,bty="n",...)#
	}#
#
#########################################################################
######################## Figure 1: Plot with categorical predictor in a coordinate system#
#########################################################################
#
## Create data:#
#
set.seed(42)#
cond = gl(2,10)		# condition#
resp = 3*as.numeric(cond)+rnorm(10)		# some arbitrary score#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
## Make the plot:#
#
# quartz("",5,6)#
# par(mai=c(1.8,1.5,0.25,0.25))#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(0,10,2.5),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=mean(resp[cond==1]),y1=mean(resp[cond==2]),lwd=4)#
# mtext("Score",side=2,line=4,font=2,cex=2)#
# ## Coding schemes below the axis labels:#
# text(c(-0.15,xcor),y=-2.5,labels=c("Treatment","0","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-3.5,labels=c("Sum","-1","1"),xpd=NA,font=2,cex=1.5)#
# text(c(-0.15,xcor),y=-4.5,labels=c("Deviation","-0.5","0.5"),xpd=NA,font=2,cex=1.5)#
# # text(-0.15,y=-5.7,"Coding",xpd=NA,font=2,cex=1.5)#
#########################################################################
######################## Figure 2: Plot with random intercepts and slopes#
#########################################################################
#
## Create data:#
#
set.seed(59)#
random_intercepts = rnorm(10,sd=30)#
set.seed(61)#
random_slopes1 = rnorm(10,sd=15)#
random_slopes2 = rnorm(10,sd=15)#
# to create the appearance of random slopes I simply add different values for y0 and y1#
shrinkage = 1.5		# strong shrinkage value for display#
linetype = 2#
#
## Coordinates for x-axis:#
#
xcor = c(0.5,1.5)#
#
# quartz("",11,5)#
# par(mai=rep(0.05,4),omi=c(1,1.5,0,0),mfrow=c(1,3))#
# ## Sub-plot 1, random intercepts only:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
# mtext("Random \nintercepts",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 1:#
# segments(x0=xcor[1],x1=xcor[2],y0=400+random_intercepts,y1=350+random_intercepts,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts,pch=20)#
# ## Sub-plot 2, with random slopes:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("Random intercepts\nand slopes",side=1,line=6,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 2:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts+random_slopes1,#
	# y1=350+random_intercepts+random_slopes2,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts+random_slopes1,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts+random_slopes2,pch=20)#
# ## Sub-plot 3, with shrinkage:#
# emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
# points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
# axis(side=1,at=xcor,labels=c("LF","HF"),font=2,lwd=4,cex.axis=1.5)#
# segments(x0=xcor[1],x1=xcor[2],y0=400,y1=350,lwd=4)#
# points(xcor,c(400,350),pch=19,cex=2.5)#
# mtext("With shrinkage",side=1,line=5,font=2,cex=1.5)#
# ## Adding schematic random intercepts to sub-plot 3:#
# segments(x0=xcor[1],x1=xcor[2],#
	# y0=400+random_intercepts/shrinkage+random_slopes1/shrinkage,#
	# y1=350+random_intercepts/shrinkage+random_slopes2/shrinkage,lty=linetype)#
# points(rep(xcor[1],10),400+random_intercepts/shrinkage+random_slopes1/shrinkage,pch=20)#
# points(rep(xcor[2],10),350+random_intercepts/shrinkage+random_slopes2/shrinkage,pch=20)#
#########################################################################
######################## Figure 3: Interaction plot#
#########################################################################
#
quartz("",7,5)#
par(mai=c(1,1.5,0.25,0.25))#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(0,10))#
## Sub-plot 1, random intercepts only:#
emptyplot(1,1,xlim=c(0.25,1.75),ylim=c(250,500))#
points(rep(xcor,each=10),resp,pch=19,col=rgb(0,0,0,0.4),cex=1.5)#
axis(side=1,at=xcor,labels=c("Control","Training"),font=2,lwd=4,cex.axis=1.5)#
axis(side=2,at=seq(250,500,50),las=2,font=2,lwd=4,cex.axis=1.5)#
segments(x0=xcor[1],x1=xcor[2],y0=380,y1=330,lwd=4)#
points(xcor,c(380,330),pch=19,cex=2.5)#
mtext("Reaction time (ms)",side=2,line=4,font=2,cex=2)#
segments(x0=xcor[1],x1=xcor[2],y0=440,y1=480,lwd=4,lty=2)#
points(xcor,c(440,480),pch=17,cex=2.5)#
## Draw in difference for treatment coding:#
arrows(x0=xcor[1],y0=395,y1=425,length=0.15,code=3,lwd=2)#
## Draw in difference for sum coding:#
arrows(x0=1,y0=355+10,y1=460-10,length=0.15,code=3,lwd=2)#
## Draw in legend:#
legend(x=0.25,y=310,lwd=2,lty=c(1,2),pch=c(19,17),legend=c("Condition A","Condition B"),cex=1.15)#
## Draw in text:#
text(x=0.33,y=410,"Simple\neffect")#
text(x=0.9,y=410,"Main\neffect")
library(ggplot2)#
npoints=500#
npointsb=1200#
opt=theme(legend.position="none",#
panel.background = element_blank(),#
panel.grid = element_blank(),#
axis.ticks=element_blank(),#
axis.title=element_blank(),#
axis.text =element_blank())#
t=seq(0,10*pi,length=npointsb)#
butterfly=data.frame(x=sin(t)*(exp(1)^cos(t)-2*cos(4*t)-(sin(t/12))^5), y=cos(t)*(exp(1)^cos(t)-2*cos(4*t)-(sin(t/12))^5), s=runif(npointsb, min=.1, max=10), f=factor(sample(1:10,npointsb,TRUE)), a=runif(npointsb,min=.1, max=.4))#
points=data.frame(x=runif(npoints,-4,4), y=runif(npoints,-3,5), s=runif(npoints,min=30, max=50), f=factor(sample(1:10,npoints,TRUE)), a=runif(npoints,min=.05, max=.15))#
data=rbind(butterfly, points)#
ggplot(data, aes(x, y, colour=f))+geom_point(alpha=data$a,size=data$s)+opt
## Bodo Winter#
## August 8, 2014#
## New and cleaner quantality simulation script#
#
#########################################################################
######################## Description of the overall idea:#
#########################################################################
#
## A population of signals initiated along a motor space#
## Each signal can be thought to correspond to a word with a particular#
## ... pronunciation#
## The motor space ranges from -10 to 10 (arbitrary units)#
## The motor space is the underlying signal space#
## This corresponds to the idea that people store motor representations#
## For each communication event, the motor value is transformed into#
## ... an acoustic space#
## This is done either linearly or non-linearly (logistic transform)#
## Then, within the acoustic dimension(!) the "central value" is found#
## All values move towards that central value#
## The amount of movement is proportional to the distance to the central#
## ... value#
## The movement is done in motor space(!)#
## Expected results: Signals in the underlying motor dimension#
## ... are more similar to each other in the linear transform#
## ... and more dissimilar to each other with the logistic transform#
## In other words, for the logistic acoustic transform#
## ... there is more variability in the motor domain#
## ... (which doesn't matter for communication), and less variability#
## ... in the acoustic domain (which does matter for communication)#
## The "move towards centroid" aspect can be thought of as hard-coding#
## ... the outcome of an imitation game (omitting the process)#
#########################################################################
######################## Description of the main functions:#
#########################################################################
#
## "singlerun" (USER FUNCTION):#
## Function that runs one simulation#
## Arguments:#
## n = the number of signals in the population; must be numeric#
## t = the number of simulation runs; must be numeric#
## plot = whether a plot is generated; must be Boolean (T/F)#
## Function returns a list with two matrices#
## In each matrix, rows are signals; columns are time points#
## One matrix contains motor values, the other one acoustic values#
#
## "batchrun" (USER FUNCTION):#
## Function that runs multiple simulations and stores the output#
## #
#########################################################################
######################## Description of the internal functions:#
#########################################################################
#
## "Logistic" and "linear" are the motor>acoustic transforms#
## They take as input a vector of motor values#
#
## "move" (INTERNAL FUNCTION):#
## Moves the motor values towards centroid:#
## Arguments:#
## motor = numeric vector of motor values to be moved#
## acoustic = numeric vector of acoustic values for evaluation of distance#
## centroid = location of the acoustic centroid#
## movement_speed = numeric variable specifying how much is being moved#
## Movement is proportional to difference from centroid by a factor#
## ... determined by "movement_speed"#
## Function returns a single vector of new motor values#
#
## "findcentroid" (INTERNAL FUNCTION):#
#########################################################################
######################## Define functions:#
#########################################################################
#
logistic = function(x){1/(1+exp(-x))}#
linear = function(x){0.05*x+0.5}#
#
x = runif(10,-10,10)#
plot(logistic(x),type="h",ylim=c(0,1))#
abline(h=mean(logistic(x)))#
#
findcentroid = function(acoustic){#
	centroid = mean(acoustic)#
	return(centroid)#
	}
findcentroid(x)
findcentroid = function(acoustic){#
	centroid = mean(acoustic)#
	return(centroid)#
	}#
move = function(motor,acoustic,centroid,movement_speed){#
	diffs = acoustic-centroid			# differences to centroid#
	diffs = diffs/(1-movement_speed)		# how much movement has to be done#
	newmotor = motor + (-1)*diffs#
	return(newmotor)#
	}
motor
motor = x
acoustic = logistic(motor)
centroid = findcentroid(acoustic)
motor = runif(10,-10,10)#
acoustic = logistic(motor)#
centroid = findcentroid(acoustic)#
move(motor,acoustic,centroid,0.9)
motor
for(i in 1:10){#
	Sys.sleep(1)#
	plot(motor,type="h")#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.9)#
}
for(i in 1:10){#
	Sys.sleep(1)#
	plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.9)#
}
motor
motor = runif(10,-10,10)
plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.9)
motor
plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.9)
motor
plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.9)
motor
for(i in 1:10){#
	Sys.sleep(1)#
	plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.9)#
}
motor = runif(10,-10,10)#
for(i in 1:10){#
	Sys.sleep(1)#
	plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.9)#
}
motor = runif(10,-10,10)#
for(i in 1:5){#
	Sys.sleep(1)#
	plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.1)#
}
motor = runif(10,-10,10)#
for(i in 1:20){#
	Sys.sleep(1)#
	plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.2)#
}
motor = runif(10,-10,10)#
for(i in 1:20){#
	Sys.sleep(0.2)#
	plot(motor,type="h",ylim=c(-10,10))#
	acoustic = logistic(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.5)#
}
motor = runif(10,-10,10)#
for(i in 1:20){#
	Sys.sleep(0.2)#
	plot(motor,type="h",ylim=c(-10,10))#
	acoustic = linear(motor)#
	centroid = findcentroid(acoustic)#
	motor = move(motor,acoustic,centroid,0.5)#
}
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
n = 10#
matrix(numeric(n*2),ncol=n)
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
n = 10#
agents = matrix(numeric(n*2),ncol=n)
agents
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
n = 10#
agents = matrix(numeric(n*2),ncol=n)#
rownames(agents) = c("leftie","rightie")
agents
handedness_vector = rep("rightie",n)
handedness_vector
sample(n,round(n/10))
round(n/10)
sample(n,round(n/10))
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
n = 10#
leftie_prob = 0.1
round(leftie_prob*n)
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
n = 10#
leftie_prob = 0.1#
agents = matrix(numeric(n*2),ncol=n)#
rownames(agents) = c("lefties_played","righties_played")#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"
handedness_vector
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
n = 100#
leftie_prob = 0.1#
agents = matrix(numeric(n*2),ncol=n)#
rownames(agents) = c("lefties_played","righties_played")#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"
handedness_vector
table(handedness_vector)
agents
0.5*0.9
0.5*0.1
10/90
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
n = 100#
leftie_prob = 0.1#
agents = matrix(numeric(n*5),ncol=n)#
rownames(agents) = c("lefties_played","righties_played","wins","losses","games")#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"
agents
i=1
agents[,i]
agents
agents[,i]
!(1:n %in% this_agent)
this_agent = 1
!(1:n %in% this_agent)
sample(1:n,n/2)
first_set = sample(1:n,n/2)#
second_set = 1:n[!(1:n %in% first_set)]
first_set
1:n %in% first_set
!(1:n %in% first_set)
(1:n)[!(1:n %in% first_set)]
first_set = sample(1:n,n/2)#
second_set = (1:n)[!(1:n %in% first_set)]
first_set
second_set
first_set = sample(1:n,n/2)#
second_set = sample((1:n)[!(1:n %in% first_set)])
second_set
first_set
paste(first_set,second_set,":")
paste(first_set,second_set,sep=":")
first_set == 4
any(first_set == 4)
any(second_set == 4)
agents[,first_set[i]]
agents[,second_set[i]]
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
## Only even number of agents are allowed#
#
n = 100#
leftie_prob = 0.1#
agents = matrix(numeric(n*5),ncol=n)#
rownames(agents) = c("lefties_played","righties_played","wins","losses","games")#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"
(1:n/2)
(1:(n/2))
i=1
first_agent = first_set[i]#
	second_agent = second_set[i]
first_agent
second_agent
first_handedness = handedness_vector[first_agent]#
	second_handedness = handedness_vector[second_agent]
first_handedness
second_handedness
agents[,first_set[i]]#
	agents[,second_set[i]]
## Add game counter:#
	agents["games",first_set[i]] = agents["games",first_set[i]] + 1#
	agents["games",second_set[i]] = agents["games",first_set[i]] + 1
agents
agents[,first_set[i]]
0.5*0.5
sample(1:100)
sample(1:100,1)
15/150
matrix(c(first_agent["games",],second_agent["games",]),nrow=2)
c(first_agent["games",],second_agent["games",])
c(first_agent["games"],second_agent["games"])
first_agent
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
## Only even number of agents are allowed#
#
n = 100#
leftie_prob = 0.1#
agents = matrix(numeric(n*6),ncol=n)#
rownames(agents) = c("handedness","lefties_played","righties_played","wins","losses","games")#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"#
agents["handedness",] = handedness_vector
agents
matrix(c(first_agent["games"],second_agent["games"]),nrow=2)
## Get agent numbers from the set of randomly sampled values (pairs that fight each other):#
	first_agent_number = first_set[i]#
	second_agent_number = second_set[i]#
	## Get the agents corresponding to the numbers:#
	first_agent = agents[,first_agent_number]#
	second_agent = agents[,second_agent_number]
matrix(c(first_agent["games"],second_agent["games"]),nrow=2)
an = function(x){as.numeric(x)}
an(matrix(c(first_agent["games"],second_agent["games"]),nrow=2))
matrix(c(an(first_agent["games"]),an(second_agent["games"])),nrow=2)
agents = as.list(1:n)
agents
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
## Only even number of agents are allowed#
#
## Initialization values:#
#
n = 100#
leftie_prob = 0.1#
#
## Determine which agents get to be lefties and which get to be righties:#
#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"#
#
agents = matrix(numeric(n*6),ncol=n)#
rownames(agents) = c("handedness","lefties_played","righties_played","wins","losses","games")#
agents["handedness",] = handedness_vector
agents
agents = matrix(numeric(n*6),ncol=n)
agents
agents = matrix(numeric(n*6),ncol=6)
agents
colnames(agents) = c("handedness","lefties_played","righties_played","wins","losses","games")
agents
agents = as.data.frame(agents)
agents
colnames(agents) = c("ID","handedness","lefties_played","righties_played","wins","losses","games")
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
## Only even number of agents are allowed#
#
## Initialization values:#
#
n = 100#
leftie_prob = 0.1#
#
## Determine which agents get to be lefties and which get to be righties:#
#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"#
#
agents = matrix(numeric(n*7),ncol=7)#
colnames(agents) = c("ID","handedness","lefties_played","righties_played","wins","losses","games")#
agents = as.data.frame(agents)
agents
## Bodo Winter#
## August 8, 2014#
## Adaptation of the leftie simulation for R#
#
## Only even number of agents are allowed#
#
## Initialization values:#
#
n = 100#
leftie_prob = 0.1#
#
## Determine which agents get to be lefties and which get to be righties:#
#
handedness_vector = rep("rightie",n)#
handedness_vector[sample(n,round(leftie_prob*n))] = "leftie"#
#
agents = matrix(numeric(n*7),ncol=7)#
colnames(agents) = c("ID","handedness","lefties_played","righties_played","wins","losses","games")#
agents = as.data.frame(agents)#
agents$ID = 1:n#
agents$handedness = handedness_vector
agents
first_set = sample(1:n,n/2)#
second_set = sample((1:n)[!(1:n %in% first_set)])
i=1
first_agent_number = first_set[i]#
	second_agent_number = second_set[i]
first_agent_number
first_agent = agents[agents$ID == first_agent_number,]#
	second_agent = agents[agents$ID == second_agent_number,]
first_agent
second_agent
matrix(c(first_agent[,"games"],second_agent[,"games"]),nrow=2)
second_agent[,"handedness"]
first_agent[,"handedness"]
rownames(win_matrix)
win_matrix = matrix(c(first_agent[,"games"],second_agent[,"games"]),nrow=2)
rownames(win_matrix)
rownames(win_matrix) = c("first_agent","second_agent")
win_matrix
second_agent
second_agent[,"lefties_played"]
win_matrix["first_agent",]/win_matrix["second_agent",]
apropos("is")
rbinom(1,1,0.5)
runif(1,0,1)
handmatch = first_agent[,"handedness"]!=second_agent[,"handedness"]
handmatch
first_agent[,"handedness"]!=second_agent[,"handedness"]
first_agent[,"handedness"]==second_agent[,"handedness"]
handmatch = first_agent[,"handedness"]==second_agent[,"handedness"]
prop
prop = win_matrix["first_agent",]/win_matrix["second_agent",]#
	if(is.nan(prop)){prop=runif(1,0,1)}		# chance proportion if previous thing resulted in division by zero
prop
who_won = ifelse(prop<=0.5,"first_agent","second_agent")
who_won
520/2
125+135+135+125
125+135+135+125+2+1.5
(125+135+135+125+2+1.5)/2
pplot(myxlim=c(0,10),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)")
)
## Bodo Winter#
## August 18, 2014#
## Subitization presentation#
#
## Plotting function:#
#
pplot = function(myxlim,myylim,#
	xlabel,ylabel,#
	myxaxis,myyaxis,axes=T,...){#
	quartz("",9,7);par(mai=c(1.5,1.5,1.5,0.8))#
	plot(1,1,type="n",xlab="",ylab="",#
		xaxt="n",yaxt="n",#
		bty="n",#
		xlim=myxlim,ylim=myylim,...)#
	box(lwd=4)#
	if(axes){#
		axis(1,at=myxaxis,font=2,lwd=4,lwd.ticks=4,cex.axis=1.75)#
		axis(2,at=myyaxis,font=2,lwd=4,lwd.ticks=4,las=2,cex.axis=1.75)#
		}#
	mtext(text=xlabel,side=1,line=4.5,font=2,cex=2.5)#
	mtext(text=ylabel,side=2,line=4.5,font=2,cex=2.5)#
	}#
#
## Subitization plot:#
#
pplot(myxlim=c(0,10),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)")
)
## Bodo Winter#
## August 18, 2014#
## Subitization presentation#
#
## Plotting function:#
#
pplot = function(myxlim,myylim,#
	xlabel,ylabel,#
	myxaxis,myyaxis,axes=T,...){#
	quartz("",9,7);par(mai=c(1.5,1.5,1.5,0.8))#
	plot(1,1,type="n",xlab="",ylab="",#
		xaxt="n",yaxt="n",#
		bty="n",#
		xlim=myxlim,ylim=myylim,...)#
	box(lwd=4)#
	if(axes){#
		axis(1,at=myxaxis,font=2,lwd=4,lwd.ticks=4,cex.axis=1.75)#
		axis(2,at=myyaxis,font=2,lwd=4,lwd.ticks=4,las=2,cex.axis=1.75)#
		}#
	mtext(text=xlabel,side=1,line=4.5,font=2,cex=2.5)#
	mtext(text=ylabel,side=2,line=4.5,font=2,cex=2.5)#
	}#
#
## Subitization plot:#
#
pplot(myxlim=c(0,10),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,500))
## Bodo Winter#
## August 18, 2014#
## Subitization presentation#
#
## Plotting function:#
#
pplot = function(myxlim,myylim,#
	xlabel,ylabel,#
	myxaxis,myyaxis,axes=T,...){#
	quartz("",9,7);par(mai=c(1.5,1.5,1.5,0.8))#
	plot(1,1,type="n",xlab="",ylab="",#
		xaxt="n",yaxt="n",#
		bty="n",#
		xlim=myxlim,ylim=myylim,...)#
	box(lwd=4)#
	if(axes){#
		axis(1,at=myxaxis,font=2,lwd=4,lwd.ticks=4,cex.axis=1.75)#
		axis(2,at=myyaxis,font=2,lwd=4,lwd.ticks=4,las=2,cex.axis=1.75)#
		}#
	mtext(text=xlabel,side=1,line=4.5,font=2,cex=2.5)#
	mtext(text=ylabel,side=2,line=4.5,font=2,cex=2.5)#
	}#
#
## Subitization plot:#
#
pplot(myxlim=c(0,10),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))
## Bodo Winter#
## August 18, 2014#
## Subitization presentation#
#
## Plotting function:#
#
pplot = function(myxlim,myylim,#
	xlabel,ylabel,#
	myxaxis,myyaxis,axes=T,...){#
	quartz("",9,7);par(mai=c(1.5,2,1.5,0.8))#
	plot(1,1,type="n",xlab="",ylab="",#
		xaxt="n",yaxt="n",#
		bty="n",#
		xlim=myxlim,ylim=myylim,...)#
	box(lwd=4)#
	if(axes){#
		axis(1,at=myxaxis,font=2,lwd=4,lwd.ticks=4,cex.axis=1.75)#
		axis(2,at=myyaxis,font=2,lwd=4,lwd.ticks=4,las=2,cex.axis=1.75)#
		}#
	mtext(text=xlabel,side=1,line=4.5,font=2,cex=2.5)#
	mtext(text=ylabel,side=2,line=5,font=2,cex=2.5)#
	}#
#
## Subitization plot:#
#
pplot(myxlim=c(0,10),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))
## Bodo Winter#
## August 18, 2014#
## Subitization presentation#
#
## Plotting function:#
#
pplot = function(myxlim,myylim,#
	xlabel,ylabel,#
	myxaxis,myyaxis,axes=T,...){#
	quartz("",9,7);par(mai=c(1.5,2,1.5,0.8))#
	plot(1,1,type="n",xlab="",ylab="",#
		xaxt="n",yaxt="n",#
		bty="n",#
		xlim=myxlim,ylim=myylim,...)#
	box(lwd=4)#
	if(axes){#
		axis(1,at=myxaxis,font=2,lwd=4,lwd.ticks=4,cex.axis=1.75)#
		axis(2,at=myyaxis,font=2,lwd=4,lwd.ticks=4,las=2,cex.axis=1.75)#
		}#
	mtext(text=xlabel,side=1,line=4.5,font=2,cex=2.5)#
	mtext(text=ylabel,side=2,line=5.5,font=2,cex=2.5)#
	}#
#
## Subitization plot:#
#
pplot(myxlim=c(0,10),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))
pplot(myxlim=c(0,10),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))#
segments(1,600,4,1000,col="darkred",lwd=4)
pplot(myxlim=c(0.5,9.5),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))#
segments(1,600,4,1000,col="darkred",lwd=4)
pplot(myxlim=c(0.5,9.5),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))#
segments(1,600,4,900,col="darkred",lwd=4)#
segments(4,900,9,4000,col="darkred",lwd=4)
pplot(myxlim=c(0.5,9.5),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))
pplot(myxlim=c(0.5,9.5),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))#
segments(1,600,4,900,col="darkred",lwd=6)
pplot(myxlim=c(0.5,9.5),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))
pplot(myxlim=c(0.5,9.5),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))#
segments(1,600,4,900,col="darkred",lwd=6)
pplot(myxlim=c(0.5,9.5),myylim=c(0,5000),xlabel=c("Cardinal Number"),ylabel=c("Reaction Time (ms)"),#
	myxaxis=1:9,myyaxis=seq(0,5000,1000))#
segments(1,600,4,900,col="darkred",lwd=6)#
segments(4,900,9,4000,col="darkred",lwd=6)
ELP = read.csv("/Volumes/Macintosh HD/Volumes/Macintosh HD/Users/teeniematlock/Desktop/big_data/ELP/ELP_with_POS_cleaned.csv")
ELP[ELP$Word %in% c("antenna","carpet","pen","hammer"),]
ELP[ELP$Word %in% c("antenna","carpet","pen","hammer"),]$I_Mean_RT
ELP[ELP$Word %in% c("antenna","carpet","pen","hammer"),]$LgSUBTLEX
ELP[ELP$Word %in% c("antenna","carpet","pen","hammer"),]$LgSUBTLWF
## Bodo Winter#
## March 26, 2014; added E3 preprocessing: April 27, 2014#
## Added E4 preprocessing: August 14, 2014#
## Josh's Courtroom preprocessing E1-E3#
#
## Set working directory:#
#
setwd("/Users/teeniematlock/Desktop/research/josh_jury_courtroom/raw_data/")
######## <<<<<<<<<<<<<<<<<<<<< EXPERIMENT 6 PREPROCESSING#
setwd("/Volumes/Macintosh HD/Volumes/Macintosh HD/Users/teeniematlock/Desktop/research/josh_jury_courtroom/raw_data/E6/")#
#
## Load in data:#
#
filenames = list.files()#
E6 = c()#
exclude = c()#
for(i in 1:length(filenames)){#
	if(nrow(read.table(filenames[i]))==1){#
		try(E6 <- rbind(E6,read.table(filenames[i],sep=";")))#
	}else{#
		warning(paste("File",filenames[i],"contains more than one row.", sep=" "))#
		exclude = c(exclude,filenames[i])#
		}#
	}#
#
colnames(E6) = c("evidence_framing","evidence_strength","spatial_position","question_position","choice","confidence","bias","experience")
######## <<<<<<<<<<<<<<<<<<<<< EXPERIMENT 6 PREPROCESSING#
setwd("/Volumes/Macintosh HD/Volumes/Macintosh HD/Users/teeniematlock/Desktop/research/josh_jury_courtroom/raw_data/E6/")#
#
## Load in data:#
#
filenames = list.files()#
E6 = c()#
exclude = c()#
for(i in 1:length(filenames)){#
	if(nrow(read.table(filenames[i]))==1){#
		try(E6 <- rbind(E6,read.table(filenames[i],sep=";")))#
	}else{#
		warning(paste("File",filenames[i],"contains more than one row.", sep=" "))#
		exclude = c(exclude,filenames[i])#
		}#
	}#
#
colnames(E6) = c("evidence_framing","evidence_strength","spatial_position","question_position","choice","confidence","bias","experience")#
#
E6$confidence_c = E6$confidence-mean(E6$confidence)
E6
summary(E6_mdl <- glm(choice ~ spatial_position*question_position + evidence_framing*evidence_strength + confidence_c,E6,family="binomial"))
summary(E6_mdl <- glm(choice ~ spatial_position + confidence_c,E6,family="binomial"))
10/90
10/100
90/100
1/9
1/10
2/10
3/10
4/10
