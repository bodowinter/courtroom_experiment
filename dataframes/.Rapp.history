mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis/'
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis/'
mainFolder
file.path(mainFolder, 'E1')
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'
file.path(mainFolder, 'E1')
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')
foldernames
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	assign(foldernames[i],#
		load_files(filenames = list.files()))#
	}
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	assign(foldernames[i],#
		load_files(filenames = list.files()))#
	}
head(E1)
head(E6A)
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}
head(E6A)
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1_unwanted <- c(1, 4, 7, 9, 10, 11)#
E2_unwanted <- c(1, 4, 7, 9, 10)#
E4_unwanted <- c(1, 4, 7, 9, 10, 11)#
#
## Delete unwanted columns:#
#
E1 <- E1[, -E1_unwanted]#
E2 <- E2[, -E2_unwanted]#
E4 <- E4[, -E4_unwanted]#
#
## Rename columns:#
#
colnames(E1) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E2) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E3) <- c('distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E4) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5A) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5B) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E6A) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
colnames(E6B) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
#
## Get rid of semicolons:#
#
E1$confidence <- rid_semi(E1$confidence)#
E2$confidence <- rid_semi(E2$confidence)#
E4$confidence <- rid_semi(E4$confidence)#
#
## Code whether defendant is far or close:#
#
E1$distance <- 'far'#
nears <- (E1$condition == '[D, P, J]' | E1$condition == '[P, D, J]')#
# weird condition codes (but consistent with script):#
E1[enars, ]$distance <- 'near'#
E2$distance <- 'near'#
fars <- (E2$condition == '[L, P, D]' | E2$condition == '[R, P, D]')#
E2[fars, ]$distance <- 'far'#
E4$distance <- 'near'#
fars <- (E4$condition == '[J, P, D]' | E4$condition == '[D, P, J]')#
E4[fars, ]$distance <- 'far'
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1_unwanted <- c(1, 4, 7, 9, 10, 11)#
E2_unwanted <- c(1, 4, 7, 9, 10)#
E4_unwanted <- c(1, 4, 7, 9, 10, 11)#
#
## Delete unwanted columns:#
#
E1 <- E1[, -E1_unwanted]#
E2 <- E2[, -E2_unwanted]#
E4 <- E4[, -E4_unwanted]#
#
## Rename columns:#
#
colnames(E1) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E2) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E3) <- c('distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E4) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5A) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5B) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E6A) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
colnames(E6B) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
#
## Get rid of semicolons:#
#
E1$confidence <- rid_semi(E1$confidence)#
E2$confidence <- rid_semi(E2$confidence)#
E4$confidence <- rid_semi(E4$confidence)#
#
## Code whether defendant is far or close:#
#
E1$distance <- 'far'#
nears <- (E1$condition == '[D, P, J]' | E1$condition == '[P, D, J]')#
# weird condition codes (but consistent with script):#
E1[nears, ]$distance <- 'near'#
E2$distance <- 'near'#
fars <- (E2$condition == '[L, P, D]' | E2$condition == '[R, P, D]')#
E2[fars, ]$distance <- 'far'#
E4$distance <- 'near'#
fars <- (E4$condition == '[J, P, D]' | E4$condition == '[D, P, J]')#
E4[fars, ]$distance <- 'far'
nears
head(E1)
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1_unwanted <- c(1, 4, 7, 9, 10, 11)#
E2_unwanted <- c(1, 4, 7, 9, 10)#
E4_unwanted <- c(1, 4, 7, 9, 10, 11)#
#
## Delete unwanted columns:#
#
E1 <- E1[, -E1_unwanted]#
E2 <- E2[, -E2_unwanted]#
E4 <- E4[, -E4_unwanted]#
#
## Rename columns:#
#
colnames(E1) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E2) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E3) <- c('distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E4) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5A) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5B) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E6A) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
colnames(E6B) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
#
## Get rid of semicolons:#
#
E1$confidence <- rid_semi(E1$confidence)#
E2$confidence <- rid_semi(E2$confidence)#
E4$confidence <- rid_semi(E4$confidence)#
#
## Code whether defendant is far or close:#
#
E1$distance <- 'far'#
nears <- (E1$condition == '[D,P,J]' | E1$condition == '[P,D,J]')#
# weird condition codes (but consistent with script):#
E1[nears, ]$distance <- 'near'#
E2$distance <- 'near'#
fars <- (E2$condition == '[L,P,D]' | E2$condition == '[R,P,D]')#
E2[fars, ]$distance <- 'far'#
E4$distance <- 'near'#
fars <- (E4$condition == '[J,P,D]' | E4$condition == '[D,P,J]')#
E4[fars, ]$distance <- 'far'
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1_unwanted <- c(1, 4, 7, 9, 10, 11)#
E2_unwanted <- c(1, 4, 7, 9, 10)#
E4_unwanted <- c(1, 4, 7, 9, 10, 11)#
#
## Delete unwanted columns:#
#
E1 <- E1[, -E1_unwanted]#
E2 <- E2[, -E2_unwanted]#
E4 <- E4[, -E4_unwanted]#
#
## Rename columns:#
#
colnames(E1) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E2) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E3) <- c('distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E4) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5A) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5B) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E6A) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
colnames(E6B) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
#
## Get rid of semicolons:#
#
E1$confidence <- rid_semi(E1$confidence)#
E2$confidence <- rid_semi(E2$confidence)#
E4$confidence <- rid_semi(E4$confidence)#
#
## Code whether defendant is far or close:#
#
E1$distance <- 'far'#
nears <- (E1$condition == '[D,P,J]' | E1$condition == '[P,D,J]')#
# weird condition codes (but consistent with script):#
E1[nears, ]$distance <- 'near'#
E2$distance <- 'near'#
fars <- (E2$condition == '[L,P,D]' | E2$condition == '[R,P,D]')#
E2[fars, ]$distance <- 'far'#
E4$distance <- 'near'#
fars <- (E4$condition == '[J,P,D]' | E4$condition == '[D,P,J]')#
E4[fars, ]$distance <- 'far'#
#
## Code whether jury is left or right:#
#
E1$room_orientation <- 'jury_right'#
lefts <- (E1$condition == '[J,P,D]' | E1$condition == '[D,P,J]')#
E1[lefts, ]$room_orientation <- 'jury_left'#
E2$room_orientation <- 'jury_right'#
lefts <- (E2$condition == '[L,P,D]' | E2$condition == '[L,D,P]')#
E2[lefts, ]$room_orientation <- 'jury_left'#
E4$room_orientation <- 'jury_left'#
lefts <- (E4$condition == '[P,D,J]' | E4$condition == '[D,P,J]')#
E4[lefts, ]$room_orientation <- 'jury_right'
E1 <- E1[, -1]#
E2 <- E2[, -1]#
E4 <- E4[, -1]
setwd(file.path(mainFolder, 'dataframes'))
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1_unwanted <- c(1, 4, 7, 9, 10, 11)#
E2_unwanted <- c(1, 4, 7, 9, 10)#
E4_unwanted <- c(1, 4, 7, 9, 10, 11)#
#
## Delete unwanted columns:#
#
E1 <- E1[, -E1_unwanted]#
E2 <- E2[, -E2_unwanted]#
E4 <- E4[, -E4_unwanted]#
#
## Rename columns:#
#
colnames(E1) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E2) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E3) <- c('distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E4) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5A) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5B) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E6A) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
colnames(E6B) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
#
## Get rid of semicolons:#
#
E1$confidence <- rid_semi(E1$confidence)#
E2$confidence <- rid_semi(E2$confidence)#
E4$confidence <- rid_semi(E4$confidence)#
#
## Code whether defendant is far or close:#
#
E1$distance <- 'far'#
nears <- (E1$condition == '[D,P,J]' | E1$condition == '[P,D,J]')#
# weird condition codes (but consistent with script):#
E1[nears, ]$distance <- 'near'#
E2$distance <- 'near'#
fars <- (E2$condition == '[L,P,D]' | E2$condition == '[R,P,D]')#
E2[fars, ]$distance <- 'far'#
E4$distance <- 'near'#
fars <- (E4$condition == '[J,P,D]' | E4$condition == '[D,P,J]')#
E4[fars, ]$distance <- 'far'#
#
## Code whether jury is left or right:#
#
E1$room_orientation <- 'jury_right'#
lefts <- (E1$condition == '[J,P,D]' | E1$condition == '[D,P,J]')#
E1[lefts, ]$room_orientation <- 'jury_left'#
E2$room_orientation <- 'jury_right'#
lefts <- (E2$condition == '[L,P,D]' | E2$condition == '[L,D,P]')#
E2[lefts, ]$room_orientation <- 'jury_left'#
E4$room_orientation <- 'jury_left'#
lefts <- (E4$condition == '[P,D,J]' | E4$condition == '[D,P,J]')#
E4[lefts, ]$room_orientation <- 'jury_right'#
#
## Get rid of 'condition' columns:#
#
E1 <- E1[, -1]#
E2 <- E2[, -1]#
E4 <- E4[, -1]#
#
## Name 'choice' columns consistently throughout:#
#
# E3#
E3$choice <- as.character(E3$choice)#
E3[E3$choice == 'picked_defendant', ]$choice <- 'defendant'#
E3[E3$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E3$choice <- as.factor(E3$choice)#
# E4#
E4$choice <- as.character(E4$choice)#
E4[E4$choice == 'defandent', ]$choice <- 'defendant'#
E4$choice <- as.factor(E4$choice)#
# E5A#
E5A$choice <- as.character(E5A$choice)#
E5A[E5A$choice == 'picked_defendant', ]$choice <- 'defendant'#
E5A[E5A$choice == 'picked_plaintiff', ]$choice <- 'plaintiff'#
E5A$choice <- as.factor(E5A$choice)#
# E5B#
E5B$choice <- as.character(E5B$choice)#
E5B[E5B$choice == 'picked_defendant', ]$choice <- 'defendant'#
E5B[E5B$choice == 'picked_plaintiff', ]$choice <- 'plaintiff'#
E5B$choice <- as.factor(E5B$choice)#
# E6A#
E6A$choice <- as.character(E6A$choice)#
E6A[E6A$choice == 'picked_defendant', ]$choice <- 'defendant'#
E6A[E6A$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E6A$choice <- as.factor(E6A$choice)#
# E6B#
E6B$choice <- as.character(E6B$choice)#
E6B[E6B$choice == 'picked_defendant', ]$choice <- 'defendant'#
E6B[E6B$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E6B$choice <- as.factor(E6B$choice)#
#
## Name 'distance' columns consistently throughout:#
#
E3$distance <- as.character(E3$distance)#
E3[E3$distance == 'defendant_close', ]$distance <- 'near'#
E3[E3$distance == 'prosecutor_close', ]$distance <- 'far'#
E5A$distance <- as.character(E5A$distance)#
E5A[E5A$distance == 'defendant_close', ]$distance <- 'near'#
E5A[E5A$distance == 'prosecutor_close', ]$distance <- 'far'#
E5B$distance <- as.character(E5B$distance)#
E5B[E5B$distance == 'defendant_close', ]$distance <- 'near'#
E5B[E5B$distance == 'prosecutor_close', ]$distance <- 'far'#
E6A$distance <- as.character(E6A$distance)#
E6A[E6A$distance == 'defendant_close', ]$distance <- 'near'#
E6A[E6A$distance == 'defendant_far', ]$distance <- 'far'#
E6B$distance <- as.character(E6B$distance)#
E6B[E6B$distance == 'defendant_close', ]$distance <- 'near'#
E6B[E6B$distance == 'defendant_far', ]$distance <- 'far'#
#
## Name 'experience' columns consistently throughout:#
#
E3$experience <- as.character(E3$experience)#
E3[E3$experience == 'no jury experience', ]$experience <- 'no'#
E3[E3$experience == 'yes jury experience', ]$experience <- 'yes'#
E5A$experience <- as.character(E5A$experience)#
E5A[E5A$experience == 'no_jury', ]$experience <- 'no'#
E5A[E5A$experience == 'yes_jury', ]$experience <- 'yes'#
E5B$experience <- as.character(E5B$experience)#
E5B[E5B$experience == 'no_jury', ]$experience <- 'no'#
E5B[E5B$experience == 'yes_jury', ]$experience <- 'yes'#
E6A$experience <- as.character(E6A$experience)#
E6A[E6A$experience == 'no_jury', ]$experience <- 'no'#
E6A[E6A$experience == 'yes_jury', ]$experience <- 'yes'#
E6B$experience <- as.character(E6B$experience)#
E6B[E6B$experience == 'no_jury', ]$experience <- 'no'#
E6B[E6B$experience == 'yes_jury', ]$experience <- 'yes'#
#
## Name 'bias' column consistently throughout:#
#
E3$bias <- as.character(E3$bias)#
E3[E3$bias == ' no bias', ]$bias <- 'no'#
E3[E3$bias == ' prosecutor bias', ]$bias <- 'prosecutor'#
E3[E3$bias == ' defendant bias', ]$bias <- 'defendant'#
E5A$bias <- as.character(E5A$bias)#
E5A[E5A$bias == 'no_bias', ]$bias <- 'no'#
E5A[E5A$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E5A[E5A$bias == 'defendant_bias', ]$bias <- 'defendant'#
E5B$bias <- as.character(E5B$bias)#
E5B[E5B$bias == 'no_bias', ]$bias <- 'no'#
E5B[E5B$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E5B[E5B$bias == 'defendant_bias', ]$bias <- 'defendant'#
E6A$bias <- as.character(E6A$bias)#
E6A[E6A$bias == 'no_bias', ]$bias <- 'no'#
E6A[E6A$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E6A[E6A$bias == 'defendant_bias', ]$bias <- 'defendant'#
E6B$bias <- as.character(E6B$bias)#
E6B[E6B$bias == 'no_bias', ]$bias <- 'no'#
E6B[E6B$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E6B[E6B$bias == 'defendant_bias', ]$bias <- 'defendant'#
#
## Change order of columns:#
#
E1 <- E1[, c(5, 1, 2, 3, 4, 6)]#
E2 <- E2[, c(5, 1, 2, 3, 4, 6)]#
E4 <- E4[, c(5, 1, 2, 3, 4, 6)]#
E5A <- E5A[, c(3, 4, 5, 6, 7, 1, 2)]#
E5B <- E5B[, c(3, 4, 5, 6, 7, 1, 2)]#
E6A <- E6A[, c(3, 5, 6, 7, 1, 2, 4, 8)]#
E6B <- E6B[, c(3, 5, 6, 7, 1, 2, 4, 8)]#
#
## Export data frames:#
#
setwd(file.path(mainFolder, 'dataframes'))
head(E1)
head(E2)
head(E3)
foldernames
setwd(file.path(mainFolder, 'dataframes'))#
for (i in 1:length(foldernames)) {#
	write.table(x = get(foldernames[i]),#
		file = paste(foldernames[i], 'csv', sep = '.'),#
		row.names = F)#
	}
setwd(file.path(mainFolder, 'dataframes'))#
for (i in 1:length(foldernames)) {#
	write.table(x = get(foldernames[i]),#
		file = paste(foldernames[i], 'csv', sep = '.'),#
		row.names = F, sep = ',')#
	}
library(dplyr)
head(E1)
head(E2)
head(E3)
head(E4)
head(E5A)
head(E6A)
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
## Load library#
#
library(dplyr)#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1_unwanted <- c(1, 4, 7, 9, 10, 11)#
E2_unwanted <- c(1, 4, 7, 9, 10)#
E4_unwanted <- c(1, 4, 7, 9, 10, 11)#
#
## Delete unwanted columns:#
#
E1 <- E1[, -E1_unwanted]#
E2 <- E2[, -E2_unwanted]#
E4 <- E4[, -E4_unwanted]#
#
## Rename columns:#
#
colnames(E1) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E2) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E3) <- c('distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E4) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5A) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5B) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E6A) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
colnames(E6B) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
#
## Get rid of semicolons:#
#
E1$confidence <- rid_semi(E1$confidence)#
E2$confidence <- rid_semi(E2$confidence)#
E4$confidence <- rid_semi(E4$confidence)#
#
## Code whether defendant is far or close:#
#
E1$distance <- 'far'#
nears <- (E1$condition == '[D,P,J]' | E1$condition == '[P,D,J]')#
# weird condition codes (but consistent with script):#
E1[nears, ]$distance <- 'near'#
E2$distance <- 'near'#
fars <- (E2$condition == '[L,P,D]' | E2$condition == '[R,P,D]')#
E2[fars, ]$distance <- 'far'#
E4$distance <- 'near'#
fars <- (E4$condition == '[J,P,D]' | E4$condition == '[D,P,J]')#
E4[fars, ]$distance <- 'far'#
#
## Code whether jury is left or right:#
#
E1$room_orientation <- 'jury_right'#
lefts <- (E1$condition == '[J,P,D]' | E1$condition == '[D,P,J]')#
E1[lefts, ]$room_orientation <- 'jury_left'#
E2$room_orientation <- 'jury_right'#
lefts <- (E2$condition == '[L,P,D]' | E2$condition == '[L,D,P]')#
E2[lefts, ]$room_orientation <- 'jury_left'#
E4$room_orientation <- 'jury_left'#
lefts <- (E4$condition == '[P,D,J]' | E4$condition == '[D,P,J]')#
E4[lefts, ]$room_orientation <- 'jury_right'#
#
## Get rid of 'condition' columns:#
#
E1 <- E1[, -1]#
E2 <- E2[, -1]#
E4 <- E4[, -1]#
#
## Name 'choice' columns consistently throughout:#
#
# E3#
E3$choice <- as.character(E3$choice)#
E3[E3$choice == 'picked_defendant', ]$choice <- 'defendant'#
E3[E3$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E3$choice <- as.factor(E3$choice)#
# E4#
E4$choice <- as.character(E4$choice)#
E4[E4$choice == 'defandent', ]$choice <- 'defendant'#
E4$choice <- as.factor(E4$choice)#
# E5A#
E5A$choice <- as.character(E5A$choice)#
E5A[E5A$choice == 'picked_defendant', ]$choice <- 'defendant'#
E5A[E5A$choice == 'picked_plaintiff', ]$choice <- 'plaintiff'#
E5A$choice <- as.factor(E5A$choice)#
# E5B#
E5B$choice <- as.character(E5B$choice)#
E5B[E5B$choice == 'picked_defendant', ]$choice <- 'defendant'#
E5B[E5B$choice == 'picked_plaintiff', ]$choice <- 'plaintiff'#
E5B$choice <- as.factor(E5B$choice)#
# E6A#
E6A$choice <- as.character(E6A$choice)#
E6A[E6A$choice == 'picked_defendant', ]$choice <- 'defendant'#
E6A[E6A$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E6A$choice <- as.factor(E6A$choice)#
# E6B#
E6B$choice <- as.character(E6B$choice)#
E6B[E6B$choice == 'picked_defendant', ]$choice <- 'defendant'#
E6B[E6B$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E6B$choice <- as.factor(E6B$choice)#
#
## Name 'distance' columns consistently throughout:#
#
E3$distance <- as.character(E3$distance)#
E3[E3$distance == 'defendant_close', ]$distance <- 'near'#
E3[E3$distance == 'prosecutor_close', ]$distance <- 'far'#
E5A$distance <- as.character(E5A$distance)#
E5A[E5A$distance == 'defendant_close', ]$distance <- 'near'#
E5A[E5A$distance == 'prosecutor_close', ]$distance <- 'far'#
E5B$distance <- as.character(E5B$distance)#
E5B[E5B$distance == 'defendant_close', ]$distance <- 'near'#
E5B[E5B$distance == 'prosecutor_close', ]$distance <- 'far'#
E6A$distance <- as.character(E6A$distance)#
E6A[E6A$distance == 'defendant_close', ]$distance <- 'near'#
E6A[E6A$distance == 'defendant_far', ]$distance <- 'far'#
E6B$distance <- as.character(E6B$distance)#
E6B[E6B$distance == 'defendant_close', ]$distance <- 'near'#
E6B[E6B$distance == 'defendant_far', ]$distance <- 'far'#
#
## Name 'experience' columns consistently throughout:#
#
E3$experience <- as.character(E3$experience)#
E3[E3$experience == 'no jury experience', ]$experience <- 'no'#
E3[E3$experience == 'yes jury experience', ]$experience <- 'yes'#
E5A$experience <- as.character(E5A$experience)#
E5A[E5A$experience == 'no_jury', ]$experience <- 'no'#
E5A[E5A$experience == 'yes_jury', ]$experience <- 'yes'#
E5B$experience <- as.character(E5B$experience)#
E5B[E5B$experience == 'no_jury', ]$experience <- 'no'#
E5B[E5B$experience == 'yes_jury', ]$experience <- 'yes'#
E6A$experience <- as.character(E6A$experience)#
E6A[E6A$experience == 'no_jury', ]$experience <- 'no'#
E6A[E6A$experience == 'yes_jury', ]$experience <- 'yes'#
E6B$experience <- as.character(E6B$experience)#
E6B[E6B$experience == 'no_jury', ]$experience <- 'no'#
E6B[E6B$experience == 'yes_jury', ]$experience <- 'yes'#
#
## Name 'bias' column consistently throughout:#
#
E3$bias <- as.character(E3$bias)#
E3[E3$bias == ' no bias', ]$bias <- 'no'#
E3[E3$bias == ' prosecutor bias', ]$bias <- 'prosecutor'#
E3[E3$bias == ' defendant bias', ]$bias <- 'defendant'#
E5A$bias <- as.character(E5A$bias)#
E5A[E5A$bias == 'no_bias', ]$bias <- 'no'#
E5A[E5A$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E5A[E5A$bias == 'defendant_bias', ]$bias <- 'defendant'#
E5B$bias <- as.character(E5B$bias)#
E5B[E5B$bias == 'no_bias', ]$bias <- 'no'#
E5B[E5B$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E5B[E5B$bias == 'defendant_bias', ]$bias <- 'defendant'#
E6A$bias <- as.character(E6A$bias)#
E6A[E6A$bias == 'no_bias', ]$bias <- 'no'#
E6A[E6A$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E6A[E6A$bias == 'defendant_bias', ]$bias <- 'defendant'#
E6B$bias <- as.character(E6B$bias)#
E6B[E6B$bias == 'no_bias', ]$bias <- 'no'#
E6B[E6B$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E6B[E6B$bias == 'defendant_bias', ]$bias <- 'defendant'#
#
## Change order of columns:#
#
E1 <- select(E1,#
	distance, choice, confidence, bias, experience, room_orientation)#
E2 <- select(E2,#
	distance, choice, confidence, bias, experience, room_orientation)#
E4 <- select(E4,#
	distance, choice, confidence, bias, experience, room_orientation)#
E5A <- select(E5A,#
	distance, choice, confidence, bias, experience,#
	language_perspective, language_evidence)#
E5B <- select(E5B,#
	distance, choice, confidence, bias, experience,#
	language_perspective, language_evidence)#
E6A <- select(E6A,#
	distance, choice, confidence, bias, language_perspective,#
	language_evidence, question_orientation, experience)#
E6B <- select(E6B,#
	distance, choice, confidence, bias, language_perspective,#
	language_evidence, question_orientation, experience)#
#
## Export data frames:#
#
setwd(file.path(mainFolder, 'dataframes'))#
for (i in 1:length(foldernames)) {#
	write.table(x = get(foldernames[i]),#
		file = paste(foldernames[i], 'csv', sep = '.'),#
		row.names = F, sep = ',')#
	}
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
## Load library#
#
library(dplyr)#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------
head(E1)
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
## Load library#
#
library(dplyr)#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1 <- select(E1,#
	-V1, -V4, -V7, -(V9:V11))
head(E1)
## Bodo Winter#
## Created: August 23,  2014; Edited & Finished: August 31,  2014#
## Cleaned and adapted to new style October 8, 2016#
## Preprocessing of Courtroom Experiment#
#
## Load library#
#
library(dplyr)#
#
##------------------------------------------------------------------#
## Define functions:#
##------------------------------------------------------------------#
#
## Function for batch-loading in .txt files from web experiments:#
#
load_files <- function(filenames, new = F){#
	xdata <- c()#
	for(i in 1:length(filenames)) {#
			if(!new){#
				xdata <- rbind(xdata, read.table(filenames[i]))#
				}#
			if(new){#
				xdata <- rbind(xdata, read.table(filenames[i], sep = ';'))#
				}#
		}#
	return(xdata)#
	}#
#
## Function that gets rid of semicolons:#
#
rid_semi <- function(x) as.numeric(gsub(';', '', x))#
##------------------------------------------------------------------#
## Load in data and append IP:#
##------------------------------------------------------------------#
#
## Set master folder:#
#
mainFolder <- '/Users/winterb/Research/josh_jury_courtroom/new_analysis'#
#
## Folder names and names of future data frames:#
#
foldernames <- c('E1', 'E2', 'E3', 'E4',#
	'E5A', 'E5B', 'E6A', 'E6B')#
#
## Loop through names, load data in and assign to data frames:#
#
for (i in 1:length(foldernames)) {#
	setwd(file.path(mainFolder, foldernames[i]))#
	## Variable for whether it is the new experiment coding scheme:#
	if (foldernames[i] %in% c('E3', 'E5A', 'E5B', 'E6A', 'E6B')) {#
		newyes <- T#
		} else { newyes <- F }#
	assign(foldernames[i],#
		load_files(filenames = list.files(), new = newyes))#
	}#
##------------------------------------------------------------------#
## Delete unwanted columns:#
##------------------------------------------------------------------#
#
## Define unwanted columns:#
#
E1 <- select(E1,#
	-V1, -V4, -V7, -(V9:V11))#
E2 <- select(E2,#
	-V1, -V4, -V7, -(V9:V10))	#
E4 <- select(E4,#
	-V1, -V4, -V7, -(V9:V11))#
#
## Rename columns:#
#
colnames(E1) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E2) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E3) <- c('distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E4) <- c('condition', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5A) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E5B) <- c('language_perspective', 'language_evidence',#
	'distance', 'choice', 'confidence', 'bias', 'experience')#
colnames(E6A) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
colnames(E6B) <- c('language_perspective', 'language_evidence',#
	'distance', 'question_orientation', 'choice', 'confidence',#
	'bias', 'experience')#
#
## Get rid of semicolons:#
#
E1 <- mutate(E1, confidence = rid_semi(confidence))#
E2 <- mutate(E2, confidence = rid_semi(confidence))#
E4 <- mutate(E4, confidence = rid_semi(confidence))#
#
## Code whether defendant is far or close:#
#
E1$distance <- 'far'#
nears <- (E1$condition == '[D,P,J]' | E1$condition == '[P,D,J]')#
# weird condition codes (but consistent with script):#
E1[nears, ]$distance <- 'near'#
E2$distance <- 'near'#
fars <- (E2$condition == '[L,P,D]' | E2$condition == '[R,P,D]')#
E2[fars, ]$distance <- 'far'#
E4$distance <- 'near'#
fars <- (E4$condition == '[J,P,D]' | E4$condition == '[D,P,J]')#
E4[fars, ]$distance <- 'far'#
#
## Code whether jury is left or right:#
#
E1$room_orientation <- 'jury_right'#
lefts <- (E1$condition == '[J,P,D]' | E1$condition == '[D,P,J]')#
E1[lefts, ]$room_orientation <- 'jury_left'#
E2$room_orientation <- 'jury_right'#
lefts <- (E2$condition == '[L,P,D]' | E2$condition == '[L,D,P]')#
E2[lefts, ]$room_orientation <- 'jury_left'#
E4$room_orientation <- 'jury_left'#
lefts <- (E4$condition == '[P,D,J]' | E4$condition == '[D,P,J]')#
E4[lefts, ]$room_orientation <- 'jury_right'#
#
## Get rid of 'condition' columns:#
#
E1 <- select(E1, -condition)#
E2 <- select(E2, -condition)#
E4 <- select(E4, -condition)#
#
## Name 'choice' columns consistently throughout:#
#
# E3#
E3$choice <- as.character(E3$choice)#
E3[E3$choice == 'picked_defendant', ]$choice <- 'defendant'#
E3[E3$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E3$choice <- as.factor(E3$choice)#
# E4#
E4$choice <- as.character(E4$choice)#
E4[E4$choice == 'defandent', ]$choice <- 'defendant'#
E4$choice <- as.factor(E4$choice)#
# E5A#
E5A$choice <- as.character(E5A$choice)#
E5A[E5A$choice == 'picked_defendant', ]$choice <- 'defendant'#
E5A[E5A$choice == 'picked_plaintiff', ]$choice <- 'plaintiff'#
E5A$choice <- as.factor(E5A$choice)#
# E5B#
E5B$choice <- as.character(E5B$choice)#
E5B[E5B$choice == 'picked_defendant', ]$choice <- 'defendant'#
E5B[E5B$choice == 'picked_plaintiff', ]$choice <- 'plaintiff'#
E5B$choice <- as.factor(E5B$choice)#
# E6A#
E6A$choice <- as.character(E6A$choice)#
E6A[E6A$choice == 'picked_defendant', ]$choice <- 'defendant'#
E6A[E6A$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E6A$choice <- as.factor(E6A$choice)#
# E6B#
E6B$choice <- as.character(E6B$choice)#
E6B[E6B$choice == 'picked_defendant', ]$choice <- 'defendant'#
E6B[E6B$choice == 'picked_prosecutor', ]$choice <- 'plaintiff'#
E6B$choice <- as.factor(E6B$choice)#
#
## Name 'distance' columns consistently throughout:#
#
E3$distance <- as.character(E3$distance)#
E3[E3$distance == 'defendant_close', ]$distance <- 'near'#
E3[E3$distance == 'prosecutor_close', ]$distance <- 'far'#
E5A$distance <- as.character(E5A$distance)#
E5A[E5A$distance == 'defendant_close', ]$distance <- 'near'#
E5A[E5A$distance == 'prosecutor_close', ]$distance <- 'far'#
E5B$distance <- as.character(E5B$distance)#
E5B[E5B$distance == 'defendant_close', ]$distance <- 'near'#
E5B[E5B$distance == 'prosecutor_close', ]$distance <- 'far'#
E6A$distance <- as.character(E6A$distance)#
E6A[E6A$distance == 'defendant_close', ]$distance <- 'near'#
E6A[E6A$distance == 'defendant_far', ]$distance <- 'far'#
E6B$distance <- as.character(E6B$distance)#
E6B[E6B$distance == 'defendant_close', ]$distance <- 'near'#
E6B[E6B$distance == 'defendant_far', ]$distance <- 'far'#
#
## Name 'experience' columns consistently throughout:#
#
E3$experience <- as.character(E3$experience)#
E3[E3$experience == 'no jury experience', ]$experience <- 'no'#
E3[E3$experience == 'yes jury experience', ]$experience <- 'yes'#
E5A$experience <- as.character(E5A$experience)#
E5A[E5A$experience == 'no_jury', ]$experience <- 'no'#
E5A[E5A$experience == 'yes_jury', ]$experience <- 'yes'#
E5B$experience <- as.character(E5B$experience)#
E5B[E5B$experience == 'no_jury', ]$experience <- 'no'#
E5B[E5B$experience == 'yes_jury', ]$experience <- 'yes'#
E6A$experience <- as.character(E6A$experience)#
E6A[E6A$experience == 'no_jury', ]$experience <- 'no'#
E6A[E6A$experience == 'yes_jury', ]$experience <- 'yes'#
E6B$experience <- as.character(E6B$experience)#
E6B[E6B$experience == 'no_jury', ]$experience <- 'no'#
E6B[E6B$experience == 'yes_jury', ]$experience <- 'yes'#
#
## Name 'bias' column consistently throughout:#
#
E3$bias <- as.character(E3$bias)#
E3[E3$bias == ' no bias', ]$bias <- 'no'#
E3[E3$bias == ' prosecutor bias', ]$bias <- 'prosecutor'#
E3[E3$bias == ' defendant bias', ]$bias <- 'defendant'#
E5A$bias <- as.character(E5A$bias)#
E5A[E5A$bias == 'no_bias', ]$bias <- 'no'#
E5A[E5A$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E5A[E5A$bias == 'defendant_bias', ]$bias <- 'defendant'#
E5B$bias <- as.character(E5B$bias)#
E5B[E5B$bias == 'no_bias', ]$bias <- 'no'#
E5B[E5B$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E5B[E5B$bias == 'defendant_bias', ]$bias <- 'defendant'#
E6A$bias <- as.character(E6A$bias)#
E6A[E6A$bias == 'no_bias', ]$bias <- 'no'#
E6A[E6A$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E6A[E6A$bias == 'defendant_bias', ]$bias <- 'defendant'#
E6B$bias <- as.character(E6B$bias)#
E6B[E6B$bias == 'no_bias', ]$bias <- 'no'#
E6B[E6B$bias == 'prosecutor_bias', ]$bias <- 'prosecutor'#
E6B[E6B$bias == 'defendant_bias', ]$bias <- 'defendant'#
#
## Change order of columns:#
#
E1 <- select(E1,#
	distance, choice, confidence, bias, experience, room_orientation)#
E2 <- select(E2,#
	distance, choice, confidence, bias, experience, room_orientation)#
E4 <- select(E4,#
	distance, choice, confidence, bias, experience, room_orientation)#
E5A <- select(E5A,#
	distance, choice, confidence, bias, experience,#
	language_perspective, language_evidence)#
E5B <- select(E5B,#
	distance, choice, confidence, bias, experience,#
	language_perspective, language_evidence)#
E6A <- select(E6A,#
	distance, choice, confidence, bias, language_perspective,#
	language_evidence, question_orientation, experience)#
E6B <- select(E6B,#
	distance, choice, confidence, bias, language_perspective,#
	language_evidence, question_orientation, experience)#
#
## Export data frames:#
#
setwd(file.path(mainFolder, 'dataframes'))#
for (i in 1:length(foldernames)) {#
	write.table(x = get(foldernames[i]),#
		file = paste(foldernames[i], 'csv', sep = '.'),#
		row.names = F, sep = ',')#
	}
head(E1)
head(E6A)
i = 1
this_file <- list.fies()[i]
this_file <- list.files()[i]
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')
this_file <- list.files()[i]
this_file
gsub('.csv', '', this_file)
gsub('.csv', '', this_file)
gsub('.csv', '', this_file)
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
for (i in 1:length(list.files()) {#
	this_file <- list.files()[i]#
	assign(gsub('.csv', '', this_file), read.csv(this_file))#
	}
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
for (i in 1:length(list.files())) {#
	this_file <- list.files()[i]#
	assign(gsub('.csv', '', this_file), read.csv(this_file))#
	}
all_files <- list.files()
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)
obj_names
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length()) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}
for (i in 1:length(obj_names)) {#
	nrow(get(obj_names[i]))#
	}
for (i in 1:length(obj_names)) {#
	print(nrow(get(obj_names[i])))#
	}
for (i in 1:length(obj_names)) {#
	print(paste(obj_names[i], nrow(get(obj_names[i]))))#
	}
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables (chose not to talk about this one,  it's weird)#
## E3/2 == 3D Version with orange labels#
## E4/3 == 2D Version#
## E5A/4A == 3D Version with language#
## E5B/4B == 2D Version with language#
## E6A/5A == 3D Version with language + late reponse time#
## E6B/5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = '='))#
	}
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(table(this_obj$distance, this_obj$choice))#
	}
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	print(table(this_obj$distance, this_obj$choice))#
	}
paste(obj_names[i], '.tab')
paste0(obj_names[i], '.tab')
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3/2 == 3D Version with orange labels#
## E4/3 == 2D Version#
## E5A/4A == 3D Version with language#
## E5B/4B == 2D Version with language#
## E6A/5A == 3D Version with language + late reponse time#
## E6B/5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = ,#
		table(this_obj$distance, this_obj$choice))#
	print(get(table_name))#
	}
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3/2 == 3D Version with orange labels#
## E4/3 == 2D Version#
## E5A/4A == 3D Version with language#
## E5B/4B == 2D Version with language#
## E6A/5A == 3D Version with language + late reponse time#
## E6B/5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = table_name, value = table(this_obj$distance,#
		this_obj$choice))#
	print(get(table_name))#
	}
obj_names
for (i in 1:length(obj_names)) {#
	assign(obj_names[i],#
		mutate(get(obj_names[i]),#
			confidence = confidence - mean(confidence)))#
	}
head(E1)
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd(' / Users / winterb / Research / josh_jury_courtroom / new_analysis / dataframes / ')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3 / 2 == 3D Version with orange labels#
## E4 / 3 == 2D Version#
## E5A / 4A == 3D Version with language#
## E5B / 4B == 2D Version with language#
## E6A / 5A == 3D Version with language + late reponse time#
## E6B / 5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = table_name, value = table(this_obj$distance,#
		this_obj$choice))#
	print(get(table_name))#
	}#
#
## Make proportions:#
#
E1.tab[1, ] <- E1.tab[1, ] / rowSums(E1.tab)[1]	# 3D#
E1.tab[2, ] <- E1.tab[2, ] / rowSums(E1.tab)[2]#
E1.tab#
E2.tab[1, ] <- E2.tab[1, ] / rowSums(E2.tab)[1]	# 3D with grey tables#
E2.tab[2, ] <- E2.tab[2, ] / rowSums(E2.tab)[2]#
E2.tab#
E3.tab[1, ] <- E3.tab[1, ] / rowSums(E3.tab)[1]	# 3D with orange labels#
E3.tab[2, ] <- E3.tab[2, ] / rowSums(E3.tab)[2]#
E3.tab#
E4.tab[1, ] <- E4.tab[1, ] / rowSums(E4.tab)[1]	# 2D#
E4.tab[2, ] <- E4.tab[2, ] / rowSums(E4.tab)[2]#
E4.tab#
E5A.tab[1, ] <- E5A.tab[1, ] / rowSums(E5A.tab)[1]	# 3D with alnguage#
E5A.tab[2, ] <- E5A.tab[2, ] / rowSums(E5A.tab)[2]#
E5A.tab#
E5B.tab[1, ] <- E5B.tab[1, ] / rowSums(E5B.tab)[1]	# 2D with language#
E5B.tab[2, ] <- E5B.tab[2, ] / rowSums(E5B.tab)[2]#
E5B.tab#
E6A.tab[1, ] <- E6A.tab[1, ] / rowSums(E6A.tab)[1]	# 3D orange with language + late#
E6A.tab[2, ] <- E6A.tab[2, ] / rowSums(E6A.tab)[2]#
E6A.tab#
(E6B.tab <- table(E6B$distance, E6B$choice))		# 2D with language + late#
E6B.tab[1, ] <- E6B.tab[1, ] / rowSums(E6B.tab)[1]#
E6B.tab[2, ] <- E6B.tab[2, ] / rowSums(E6B.tab)[2]#
E6B.tab#
#
## Coding (deviation coding):#
#
contrasts(E1$distance) <- contr.sum(2) / 2#
contrasts(E1$experience) <- contr.sum(2) / 2#
contrasts(E1$room_orientation) <- contr.sum(2) / 2#
contrasts(E2$distance) <- contr.sum(2) / 2#
contrasts(E2$experience) <- contr.sum(2) / 2#
contrasts(E2$room_orientation) <- contr.sum(2) / 2#
contrasts(E3$distance) <- contr.sum(2) / 2#
contrasts(E3$experience) <- contr.sum(2) / 2#
contrasts(E4$distance) <- contr.sum(2) / 2#
contrasts(E4$experience) <- contr.sum(2) / 2#
contrasts(E4$room_orientation) <- contr.sum(2) / 2#
contrasts(E5A$distance) <- contr.sum(2) / 2#
contrasts(E5A$experience) <- contr.sum(2) / 2#
contrasts(E5A$language_perspective) <- contr.sum(2) / 2#
contrasts(E5A$language_evidence) <- contr.sum(2) / 2#
contrasts(E5B$distance) <- contr.sum(2) / 2#
contrasts(E5B$experience) <- contr.sum(2) / 2#
contrasts(E5B$language_perspective) <- contr.sum(2) / 2#
contrasts(E5B$language_evidence) <- contr.sum(2) / 2#
contrasts(E6A$distance) <- contr.sum(2) / 2#
contrasts(E6A$experience) <- contr.sum(2) / 2#
contrasts(E6A$language_perspective) <- contr.sum(2) / 2#
contrasts(E6A$language_evidence) <- contr.sum(2) / 2#
contrasts(E6B$distance) <- contr.sum(2) / 2#
contrasts(E6B$experience) <- contr.sum(2) / 2#
contrasts(E6B$language_perspective) <- contr.sum(2) / 2#
contrasts(E6B$language_evidence) <- contr.sum(2) / 2#
#
## Centering confidence:#
#
for (i in 1:length(obj_names)) {#
	assign(obj_names[i],#
		mutate(get(obj_names[i]),#
			confidence = confidence - mean(confidence)))#
	}#
#
## Analysis:#
#
summary(E1.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E1, family = 'binomial'))#
summary(E2.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E2, family = 'binomial'))#
summary(E3.mdl <- glm(choice ~ distance + confidence + experience,#
	E3, family = 'binomial'))#
summary(E4.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E4, family = 'binomial'))#
summary(E5A.mdl <- glm(choice ~ distance + confidence + experience +#
	language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E5A, family = 'binomial'))#
summary(E5B.mdl <- glm(choice ~ distance + confidence + experience +#
	language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E5B, family = 'binomial'))#
summary(E6A.mdl <- glm(choice ~ distance + confidence + experience +#
	question_orientation +  language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E6A, family = 'binomial'))#
summary(E6B.mdl <- glm(choice ~ distance + confidence + experience +#
	question_orientation + language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E6B, family = 'binomial'))
head(E1)
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd(' / Users / winterb / Research / josh_jury_courtroom / new_analysis / dataframes / ')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3 / 2 == 3D Version with orange labels#
## E4 / 3 == 2D Version#
## E5A / 4A == 3D Version with language#
## E5B / 4B == 2D Version with language#
## E6A / 5A == 3D Version with language + late reponse time#
## E6B / 5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = table_name, value = table(this_obj$distance,#
		this_obj$choice))#
	print(get(table_name))#
	}#
#
## Make proportions:#
#
E1.tab[1, ] <- E1.tab[1, ] / rowSums(E1.tab)[1]	# 3D#
E1.tab[2, ] <- E1.tab[2, ] / rowSums(E1.tab)[2]#
E1.tab#
E2.tab[1, ] <- E2.tab[1, ] / rowSums(E2.tab)[1]	# 3D with grey tables#
E2.tab[2, ] <- E2.tab[2, ] / rowSums(E2.tab)[2]#
E2.tab#
E3.tab[1, ] <- E3.tab[1, ] / rowSums(E3.tab)[1]	# 3D with orange labels#
E3.tab[2, ] <- E3.tab[2, ] / rowSums(E3.tab)[2]#
E3.tab#
E4.tab[1, ] <- E4.tab[1, ] / rowSums(E4.tab)[1]	# 2D#
E4.tab[2, ] <- E4.tab[2, ] / rowSums(E4.tab)[2]#
E4.tab#
E5A.tab[1, ] <- E5A.tab[1, ] / rowSums(E5A.tab)[1]	# 3D with alnguage#
E5A.tab[2, ] <- E5A.tab[2, ] / rowSums(E5A.tab)[2]#
E5A.tab#
E5B.tab[1, ] <- E5B.tab[1, ] / rowSums(E5B.tab)[1]	# 2D with language#
E5B.tab[2, ] <- E5B.tab[2, ] / rowSums(E5B.tab)[2]#
E5B.tab#
E6A.tab[1, ] <- E6A.tab[1, ] / rowSums(E6A.tab)[1]	# 3D orange with language + late#
E6A.tab[2, ] <- E6A.tab[2, ] / rowSums(E6A.tab)[2]#
E6A.tab#
(E6B.tab <- table(E6B$distance, E6B$choice))		# 2D with language + late#
E6B.tab[1, ] <- E6B.tab[1, ] / rowSums(E6B.tab)[1]#
E6B.tab[2, ] <- E6B.tab[2, ] / rowSums(E6B.tab)[2]#
E6B.tab#
#
## Coding (deviation coding):#
#
E1 <- mutate(E1, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E1$distance) <- contr.sum(2) / 2#
contrasts(E1$experience) <- contr.sum(2) / 2#
contrasts(E1$room_orientation) <- contr.sum(2) / 2#
E2 <- mutate(E2, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E2$distance) <- contr.sum(2) / 2#
contrasts(E2$experience) <- contr.sum(2) / 2#
contrasts(E2$room_orientation) <- contr.sum(2) / 2#
E2 <- mutate(E2, distance = as.factor(distance),#
	experience = as.factor(experience))#
contrasts(E3$distance) <- contr.sum(2) / 2#
contrasts(E3$experience) <- contr.sum(2) / 2#
E4 <- mutate(E4, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E4$distance) <- contr.sum(2) / 2#
contrasts(E4$experience) <- contr.sum(2) / 2#
contrasts(E4$room_orientation) <- contr.sum(2) / 2#
E5A <- mutate(E5A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5A$distance) <- contr.sum(2) / 2#
contrasts(E5A$experience) <- contr.sum(2) / 2#
contrasts(E5A$language_perspective) <- contr.sum(2) / 2#
contrasts(E5A$language_evidence) <- contr.sum(2) / 2#
E5B <- mutate(E5B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5B$distance) <- contr.sum(2) / 2#
contrasts(E5B$experience) <- contr.sum(2) / 2#
contrasts(E5B$language_perspective) <- contr.sum(2) / 2#
contrasts(E5B$language_evidence) <- contr.sum(2) / 2#
E6A <- mutate(E6A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6A$distance) <- contr.sum(2) / 2#
contrasts(E6A$experience) <- contr.sum(2) / 2#
contrasts(E6A$language_perspective) <- contr.sum(2) / 2#
contrasts(E6A$language_evidence) <- contr.sum(2) / 2#
E6B <- mutate(E6B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6B$distance) <- contr.sum(2) / 2#
contrasts(E6B$experience) <- contr.sum(2) / 2#
contrasts(E6B$language_perspective) <- contr.sum(2) / 2#
contrasts(E6B$language_evidence) <- contr.sum(2) / 2
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd(' / Users / winterb / Research / josh_jury_courtroom / new_analysis / dataframes / ')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3 / 2 == 3D Version with orange labels#
## E4 / 3 == 2D Version#
## E5A / 4A == 3D Version with language#
## E5B / 4B == 2D Version with language#
## E6A / 5A == 3D Version with language + late reponse time#
## E6B / 5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = table_name, value = table(this_obj$distance,#
		this_obj$choice))#
	print(get(table_name))#
	}#
#
## Make proportions:#
#
E1.tab[1, ] <- E1.tab[1, ] / rowSums(E1.tab)[1]	# 3D#
E1.tab[2, ] <- E1.tab[2, ] / rowSums(E1.tab)[2]#
E1.tab#
E2.tab[1, ] <- E2.tab[1, ] / rowSums(E2.tab)[1]	# 3D with grey tables#
E2.tab[2, ] <- E2.tab[2, ] / rowSums(E2.tab)[2]#
E2.tab#
E3.tab[1, ] <- E3.tab[1, ] / rowSums(E3.tab)[1]	# 3D with orange labels#
E3.tab[2, ] <- E3.tab[2, ] / rowSums(E3.tab)[2]#
E3.tab#
E4.tab[1, ] <- E4.tab[1, ] / rowSums(E4.tab)[1]	# 2D#
E4.tab[2, ] <- E4.tab[2, ] / rowSums(E4.tab)[2]#
E4.tab#
E5A.tab[1, ] <- E5A.tab[1, ] / rowSums(E5A.tab)[1]	# 3D with alnguage#
E5A.tab[2, ] <- E5A.tab[2, ] / rowSums(E5A.tab)[2]#
E5A.tab#
E5B.tab[1, ] <- E5B.tab[1, ] / rowSums(E5B.tab)[1]	# 2D with language#
E5B.tab[2, ] <- E5B.tab[2, ] / rowSums(E5B.tab)[2]#
E5B.tab#
E6A.tab[1, ] <- E6A.tab[1, ] / rowSums(E6A.tab)[1]	# 3D orange with language + late#
E6A.tab[2, ] <- E6A.tab[2, ] / rowSums(E6A.tab)[2]#
E6A.tab#
(E6B.tab <- table(E6B$distance, E6B$choice))		# 2D with language + late#
E6B.tab[1, ] <- E6B.tab[1, ] / rowSums(E6B.tab)[1]#
E6B.tab[2, ] <- E6B.tab[2, ] / rowSums(E6B.tab)[2]#
E6B.tab#
#
## Coding (deviation coding):#
#
E1 <- mutate(E1, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E1$distance) <- contr.sum(2) / 2#
contrasts(E1$experience) <- contr.sum(2) / 2#
contrasts(E1$room_orientation) <- contr.sum(2) / 2#
E2 <- mutate(E2, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E2$distance) <- contr.sum(2) / 2#
contrasts(E2$experience) <- contr.sum(2) / 2#
contrasts(E2$room_orientation) <- contr.sum(2) / 2#
E3 <- mutate(E3, distance = as.factor(distance),#
	experience = as.factor(experience))#
contrasts(E3$distance) <- contr.sum(2) / 2#
contrasts(E3$experience) <- contr.sum(2) / 2#
E4 <- mutate(E4, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E4$distance) <- contr.sum(2) / 2#
contrasts(E4$experience) <- contr.sum(2) / 2#
contrasts(E4$room_orientation) <- contr.sum(2) / 2#
E5A <- mutate(E5A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5A$distance) <- contr.sum(2) / 2#
contrasts(E5A$experience) <- contr.sum(2) / 2#
contrasts(E5A$language_perspective) <- contr.sum(2) / 2#
contrasts(E5A$language_evidence) <- contr.sum(2) / 2#
E5B <- mutate(E5B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5B$distance) <- contr.sum(2) / 2#
contrasts(E5B$experience) <- contr.sum(2) / 2#
contrasts(E5B$language_perspective) <- contr.sum(2) / 2#
contrasts(E5B$language_evidence) <- contr.sum(2) / 2#
E6A <- mutate(E6A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6A$distance) <- contr.sum(2) / 2#
contrasts(E6A$experience) <- contr.sum(2) / 2#
contrasts(E6A$language_perspective) <- contr.sum(2) / 2#
contrasts(E6A$language_evidence) <- contr.sum(2) / 2#
E6B <- mutate(E6B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6B$distance) <- contr.sum(2) / 2#
contrasts(E6B$experience) <- contr.sum(2) / 2#
contrasts(E6B$language_perspective) <- contr.sum(2) / 2#
contrasts(E6B$language_evidence) <- contr.sum(2) / 2
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')
library(MuMIn)
r.squaredGLMM(E1.mdl)
summary(E1.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E1, family = 'binomial'))
r.squaredGLMM(E1.mdl)
summary(E1.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E1, family = 'binomial'))
E1$choice
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3 / 2 == 3D Version with orange labels#
## E4 / 3 == 2D Version#
## E5A / 4A == 3D Version with language#
## E5B / 4B == 2D Version with language#
## E6A / 5A == 3D Version with language + late reponse time#
## E6B / 5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = table_name, value = table(this_obj$distance,#
		this_obj$choice))#
	print(get(table_name))#
	}#
#
## Make proportions:#
#
E1.tab[1, ] <- E1.tab[1, ] / rowSums(E1.tab)[1]	# 3D#
E1.tab[2, ] <- E1.tab[2, ] / rowSums(E1.tab)[2]#
E1.tab#
E2.tab[1, ] <- E2.tab[1, ] / rowSums(E2.tab)[1]	# 3D with grey tables#
E2.tab[2, ] <- E2.tab[2, ] / rowSums(E2.tab)[2]#
E2.tab#
E3.tab[1, ] <- E3.tab[1, ] / rowSums(E3.tab)[1]	# 3D with orange labels#
E3.tab[2, ] <- E3.tab[2, ] / rowSums(E3.tab)[2]#
E3.tab#
E4.tab[1, ] <- E4.tab[1, ] / rowSums(E4.tab)[1]	# 2D#
E4.tab[2, ] <- E4.tab[2, ] / rowSums(E4.tab)[2]#
E4.tab#
E5A.tab[1, ] <- E5A.tab[1, ] / rowSums(E5A.tab)[1]	# 3D with alnguage#
E5A.tab[2, ] <- E5A.tab[2, ] / rowSums(E5A.tab)[2]#
E5A.tab#
E5B.tab[1, ] <- E5B.tab[1, ] / rowSums(E5B.tab)[1]	# 2D with language#
E5B.tab[2, ] <- E5B.tab[2, ] / rowSums(E5B.tab)[2]#
E5B.tab#
E6A.tab[1, ] <- E6A.tab[1, ] / rowSums(E6A.tab)[1]	# 3D orange with language + late#
E6A.tab[2, ] <- E6A.tab[2, ] / rowSums(E6A.tab)[2]#
E6A.tab#
(E6B.tab <- table(E6B$distance, E6B$choice))		# 2D with language + late#
E6B.tab[1, ] <- E6B.tab[1, ] / rowSums(E6B.tab)[1]#
E6B.tab[2, ] <- E6B.tab[2, ] / rowSums(E6B.tab)[2]#
E6B.tab#
#
## Coding (deviation coding):#
#
E1 <- mutate(E1, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E1$distance) <- contr.sum(2) / 2#
contrasts(E1$experience) <- contr.sum(2) / 2#
contrasts(E1$room_orientation) <- contr.sum(2) / 2#
E2 <- mutate(E2, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E2$distance) <- contr.sum(2) / 2#
contrasts(E2$experience) <- contr.sum(2) / 2#
contrasts(E2$room_orientation) <- contr.sum(2) / 2#
E3 <- mutate(E3, distance = as.factor(distance),#
	experience = as.factor(experience))#
contrasts(E3$distance) <- contr.sum(2) / 2#
contrasts(E3$experience) <- contr.sum(2) / 2#
E4 <- mutate(E4, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E4$distance) <- contr.sum(2) / 2#
contrasts(E4$experience) <- contr.sum(2) / 2#
contrasts(E4$room_orientation) <- contr.sum(2) / 2#
E5A <- mutate(E5A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5A$distance) <- contr.sum(2) / 2#
contrasts(E5A$experience) <- contr.sum(2) / 2#
contrasts(E5A$language_perspective) <- contr.sum(2) / 2#
contrasts(E5A$language_evidence) <- contr.sum(2) / 2#
E5B <- mutate(E5B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5B$distance) <- contr.sum(2) / 2#
contrasts(E5B$experience) <- contr.sum(2) / 2#
contrasts(E5B$language_perspective) <- contr.sum(2) / 2#
contrasts(E5B$language_evidence) <- contr.sum(2) / 2#
E6A <- mutate(E6A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6A$distance) <- contr.sum(2) / 2#
contrasts(E6A$experience) <- contr.sum(2) / 2#
contrasts(E6A$language_perspective) <- contr.sum(2) / 2#
contrasts(E6A$language_evidence) <- contr.sum(2) / 2#
E6B <- mutate(E6B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6B$distance) <- contr.sum(2) / 2#
contrasts(E6B$experience) <- contr.sum(2) / 2#
contrasts(E6B$language_perspective) <- contr.sum(2) / 2#
contrasts(E6B$language_evidence) <- contr.sum(2) / 2#
#
## Centering confidence and make 'choice' into factor:#
#
for (i in 1:length(obj_names)) {#
	assign(obj_names[i],#
		mutate(get(obj_names[i]),#
			confidence = confidence - mean(confidence),#
			choice = as.factor(choice)))#
	}
summary(E1.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E1, family = 'binomial'))
r.squaredGLMM(E1.mdl)
## (following http: /  / thestatsgeek.com / 2014 / 02 / 08 / r-squared-in-logistic-regression / )#
#
1-E1.mdl$deviance / E1.mdl$null.deviance#
1-E2.mdl$deviance / E2.mdl$null.deviance#
1-E3.mdl$deviance / E3.mdl$null.deviance#
1-E4.mdl$deviance / E4.mdl$null.deviance#
1-E5A.mdl$deviance / E5A.mdl$null.deviance#
1-E5B.mdl$deviance / E5B.mdl$null.deviance#
1-E6A.mdl$deviance / E6A.mdl$null.deviance#
1-E6B.mdl$deviance / E6B.mdl$null.deviance
head(E5A)
xdata <- cbind(data.frame(experiment = rep('E5A', nrow(E5A))),#
	select(E5A, -bias))
xdata <- cbind(data.frame(experiment = rep('E5A', nrow(E5A))),#
	select(E5A, -bias))#
xdata <- rbind(xdata,#
	cbind(data.frame(experiment = rep('E5B', nrow(E5B))), #
	select(E5B, -bias)))
head(E5A)
head(E6A)
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Analysis of Courtroom Experiment#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3 / 2 == 3D Version with orange labels#
## E4 / 3 == 2D Version#
## E5A / 4A == 3D Version with language#
## E5B / 4B == 2D Version with language#
## E6A / 5A == 3D Version with language + late reponse time#
## E6B / 5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = table_name, value = table(this_obj$distance,#
		this_obj$choice))#
	print(get(table_name))#
	}#
#
## Make proportions:#
#
E1.tab[1, ] <- E1.tab[1, ] / rowSums(E1.tab)[1]	# 3D#
E1.tab[2, ] <- E1.tab[2, ] / rowSums(E1.tab)[2]#
E1.tab#
E2.tab[1, ] <- E2.tab[1, ] / rowSums(E2.tab)[1]	# 3D with grey tables#
E2.tab[2, ] <- E2.tab[2, ] / rowSums(E2.tab)[2]#
E2.tab#
E3.tab[1, ] <- E3.tab[1, ] / rowSums(E3.tab)[1]	# 3D with orange labels#
E3.tab[2, ] <- E3.tab[2, ] / rowSums(E3.tab)[2]#
E3.tab#
E4.tab[1, ] <- E4.tab[1, ] / rowSums(E4.tab)[1]	# 2D#
E4.tab[2, ] <- E4.tab[2, ] / rowSums(E4.tab)[2]#
E4.tab#
E5A.tab[1, ] <- E5A.tab[1, ] / rowSums(E5A.tab)[1]	# 3D with alnguage#
E5A.tab[2, ] <- E5A.tab[2, ] / rowSums(E5A.tab)[2]#
E5A.tab#
E5B.tab[1, ] <- E5B.tab[1, ] / rowSums(E5B.tab)[1]	# 2D with language#
E5B.tab[2, ] <- E5B.tab[2, ] / rowSums(E5B.tab)[2]#
E5B.tab#
E6A.tab[1, ] <- E6A.tab[1, ] / rowSums(E6A.tab)[1]	# 3D orange with language + late#
E6A.tab[2, ] <- E6A.tab[2, ] / rowSums(E6A.tab)[2]#
E6A.tab#
(E6B.tab <- table(E6B$distance, E6B$choice))		# 2D with language + late#
E6B.tab[1, ] <- E6B.tab[1, ] / rowSums(E6B.tab)[1]#
E6B.tab[2, ] <- E6B.tab[2, ] / rowSums(E6B.tab)[2]#
E6B.tab#
#
## Coding (deviation coding):#
#
E1 <- mutate(E1, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E1$distance) <- contr.sum(2) / 2#
contrasts(E1$experience) <- contr.sum(2) / 2#
contrasts(E1$room_orientation) <- contr.sum(2) / 2#
E2 <- mutate(E2, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E2$distance) <- contr.sum(2) / 2#
contrasts(E2$experience) <- contr.sum(2) / 2#
contrasts(E2$room_orientation) <- contr.sum(2) / 2#
E3 <- mutate(E3, distance = as.factor(distance),#
	experience = as.factor(experience))#
contrasts(E3$distance) <- contr.sum(2) / 2#
contrasts(E3$experience) <- contr.sum(2) / 2#
E4 <- mutate(E4, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E4$distance) <- contr.sum(2) / 2#
contrasts(E4$experience) <- contr.sum(2) / 2#
contrasts(E4$room_orientation) <- contr.sum(2) / 2#
E5A <- mutate(E5A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5A$distance) <- contr.sum(2) / 2#
contrasts(E5A$experience) <- contr.sum(2) / 2#
contrasts(E5A$language_perspective) <- contr.sum(2) / 2#
contrasts(E5A$language_evidence) <- contr.sum(2) / 2#
E5B <- mutate(E5B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5B$distance) <- contr.sum(2) / 2#
contrasts(E5B$experience) <- contr.sum(2) / 2#
contrasts(E5B$language_perspective) <- contr.sum(2) / 2#
contrasts(E5B$language_evidence) <- contr.sum(2) / 2#
E6A <- mutate(E6A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6A$distance) <- contr.sum(2) / 2#
contrasts(E6A$experience) <- contr.sum(2) / 2#
contrasts(E6A$language_perspective) <- contr.sum(2) / 2#
contrasts(E6A$language_evidence) <- contr.sum(2) / 2#
E6B <- mutate(E6B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6B$distance) <- contr.sum(2) / 2#
contrasts(E6B$experience) <- contr.sum(2) / 2#
contrasts(E6B$language_perspective) <- contr.sum(2) / 2#
contrasts(E6B$language_evidence) <- contr.sum(2) / 2#
#
## Centering confidence and make 'choice' into factor:#
#
for (i in 1:length(obj_names)) {#
	assign(obj_names[i],#
		mutate(get(obj_names[i]),#
			confidence = confidence - mean(confidence),#
			choice = as.factor(choice)))#
	}#
#
## Analysis:#
#
summary(E1.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E1, family = 'binomial'))#
summary(E2.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E2, family = 'binomial'))#
summary(E3.mdl <- glm(choice ~ distance + confidence + experience,#
	E3, family = 'binomial'))#
summary(E4.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E4, family = 'binomial'))#
summary(E5A.mdl <- glm(choice ~ distance + confidence + experience +#
	language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E5A, family = 'binomial'))#
summary(E5B.mdl <- glm(choice ~ distance + confidence + experience +#
	language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E5B, family = 'binomial'))#
summary(E6A.mdl <- glm(choice ~ distance + confidence + experience +#
	question_orientation +  language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E6A, family = 'binomial'))#
summary(E6B.mdl <- glm(choice ~ distance + confidence + experience +#
	question_orientation + language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E6B, family = 'binomial'))#
#
## Combined analysis for E5A-E6B:#
#
xdata <- cbind(data.frame(experiment = rep('E5A', nrow(E5A))),#
	select(E5A, -bias))#
xdata <- rbind(xdata,#
	cbind(data.frame(experiment = rep('E5B', nrow(E5B))), #
	select(E5B, -bias)))#
xdata <- rbind(xdata, cbind(data.frame(experiment = rep('E6A', nrow(E6A))), #
	select(E6A, -bias, -question_orientation)))#
xdata <- rbind(xdata, cbind(data.frame(experiment = rep('E6B', nrow(E6B))), #
	select(E6B, -bias, -question_orientation)))
xdata
head(xdata)
obj_names
obj_names[-2]
sapply(obj_names[-2], FUN = function(x) nrow(get(x)))
sum(sapply(obj_names[-2], FUN = function(x) nrow(get(x))))
E1.tab
xtab <- table(E1$distance, E1$choice)#
for (i in 1:length(obj_names[-2])) {#
	this_obj <- get(obj_names[-2][i])#
	xtab <- xtab + table(obj_names$distance, obj_names$choice)#
	}
xtab <- table(E1$distance, E1$choice)
xtab
xtab
xtab <- table(E1$distance, E1$choice)#
for (i in 1:length(obj_names[-2])) {#
	this_obj <- get(obj_names[-2][i])#
	xtab <- xtab + table(this_obj$distance, this_obj$choice)#
	}
xtab
## Bodo Winter#
## Created: August 31,  2014; Edits October 23,  2014; October 24,  2014#
## Added additional data for E6A & E6B on November 15,  2014; November 16,  2014#
## Cleaned up code and looped, October 8, 2016#
## Analysis of Courtroom Experiment#
#
##------------------------------------------------------------------#
## Preprocessing:#
##------------------------------------------------------------------#
#
library(dplyr)#
#
## Define function:#
#
emptyplot <- function(x, y, xaxt = 'n', yaxt = 'n',#
	ylab = '', xlab = '', type = 'n', main = '', ...) {#
	plot(x, y, xaxt = xaxt, yaxt = yaxt, ylab = ylab,#
		xlab = xlab, type = type, main = main, ...)#
	}#
#
## Load in data:#
#
setwd('/Users/winterb/Research/josh_jury_courtroom/new_analysis/dataframes/')#
options(stringsAsFactors = F)#
all_files <- list.files()#
obj_names <- gsub('.csv', '', all_files)#
for (i in 1:length(all_files)) {#
	this_file <- all_files[i]#
	assign(obj_names[i], read.csv(this_file))#
	}#
#
## Description of experiments:#
#
## E1 == 3D Version with no controls for font size#
## (E2) == 3D Version with grey tables#
# (chose not to talk about this one,  it's weird)#
## E3 / 2 == 3D Version with orange labels#
## E4 / 3 == 2D Version#
## E5A / 4A == 3D Version with language#
## E5B / 4B == 2D Version with language#
## E6A / 5A == 3D Version with language + late reponse time#
## E6B / 5B == 2D Version with language + late reponse time#
#
## How much data per experiment:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(paste(obj_names[i],#
		nrow(this_obj), sep = ' = '))#
	}#
##------------------------------------------------------------------#
## Tabulate data:#
##------------------------------------------------------------------#
#
## Make summary tables:#
#
for (i in 1:length(obj_names)) {#
	this_obj <- get(obj_names[i])#
	print(obj_names[i])#
	table_name <- paste0(obj_names[i], '.tab')#
	assign(x = table_name, value = table(this_obj$distance,#
		this_obj$choice))#
	print(get(table_name))#
	}#
#
## Make proportions:#
#
E1.tab[1, ] <- E1.tab[1, ] / rowSums(E1.tab)[1]	# 3D#
E1.tab[2, ] <- E1.tab[2, ] / rowSums(E1.tab)[2]#
E1.tab#
E2.tab[1, ] <- E2.tab[1, ] / rowSums(E2.tab)[1]	# 3D with grey tables#
E2.tab[2, ] <- E2.tab[2, ] / rowSums(E2.tab)[2]#
E2.tab#
E3.tab[1, ] <- E3.tab[1, ] / rowSums(E3.tab)[1]	# 3D with orange labels#
E3.tab[2, ] <- E3.tab[2, ] / rowSums(E3.tab)[2]#
E3.tab#
E4.tab[1, ] <- E4.tab[1, ] / rowSums(E4.tab)[1]	# 2D#
E4.tab[2, ] <- E4.tab[2, ] / rowSums(E4.tab)[2]#
E4.tab#
E5A.tab[1, ] <- E5A.tab[1, ] / rowSums(E5A.tab)[1]	# 3D with alnguage#
E5A.tab[2, ] <- E5A.tab[2, ] / rowSums(E5A.tab)[2]#
E5A.tab#
E5B.tab[1, ] <- E5B.tab[1, ] / rowSums(E5B.tab)[1]	# 2D with language#
E5B.tab[2, ] <- E5B.tab[2, ] / rowSums(E5B.tab)[2]#
E5B.tab#
E6A.tab[1, ] <- E6A.tab[1, ] / rowSums(E6A.tab)[1]	# 3D orange with language + late#
E6A.tab[2, ] <- E6A.tab[2, ] / rowSums(E6A.tab)[2]#
E6A.tab#
(E6B.tab <- table(E6B$distance, E6B$choice))		# 2D with language + late#
E6B.tab[1, ] <- E6B.tab[1, ] / rowSums(E6B.tab)[1]#
E6B.tab[2, ] <- E6B.tab[2, ] / rowSums(E6B.tab)[2]#
E6B.tab#
##------------------------------------------------------------------#
## Coding predictors and performing logistic regression:#
##------------------------------------------------------------------#
#
## Coding (deviation coding):#
#
E1 <- mutate(E1, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E1$distance) <- contr.sum(2) / 2#
contrasts(E1$experience) <- contr.sum(2) / 2#
contrasts(E1$room_orientation) <- contr.sum(2) / 2#
E2 <- mutate(E2, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E2$distance) <- contr.sum(2) / 2#
contrasts(E2$experience) <- contr.sum(2) / 2#
contrasts(E2$room_orientation) <- contr.sum(2) / 2#
E3 <- mutate(E3, distance = as.factor(distance),#
	experience = as.factor(experience))#
contrasts(E3$distance) <- contr.sum(2) / 2#
contrasts(E3$experience) <- contr.sum(2) / 2#
E4 <- mutate(E4, distance = as.factor(distance),#
	experience = as.factor(experience),#
	room_orientation = as.factor(room_orientation))#
contrasts(E4$distance) <- contr.sum(2) / 2#
contrasts(E4$experience) <- contr.sum(2) / 2#
contrasts(E4$room_orientation) <- contr.sum(2) / 2#
E5A <- mutate(E5A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5A$distance) <- contr.sum(2) / 2#
contrasts(E5A$experience) <- contr.sum(2) / 2#
contrasts(E5A$language_perspective) <- contr.sum(2) / 2#
contrasts(E5A$language_evidence) <- contr.sum(2) / 2#
E5B <- mutate(E5B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E5B$distance) <- contr.sum(2) / 2#
contrasts(E5B$experience) <- contr.sum(2) / 2#
contrasts(E5B$language_perspective) <- contr.sum(2) / 2#
contrasts(E5B$language_evidence) <- contr.sum(2) / 2#
E6A <- mutate(E6A, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6A$distance) <- contr.sum(2) / 2#
contrasts(E6A$experience) <- contr.sum(2) / 2#
contrasts(E6A$language_perspective) <- contr.sum(2) / 2#
contrasts(E6A$language_evidence) <- contr.sum(2) / 2#
E6B <- mutate(E6B, distance = as.factor(distance),#
	experience = as.factor(experience),#
	language_perspective = as.factor(language_perspective),#
	language_evidence = as.factor(language_evidence))#
contrasts(E6B$distance) <- contr.sum(2) / 2#
contrasts(E6B$experience) <- contr.sum(2) / 2#
contrasts(E6B$language_perspective) <- contr.sum(2) / 2#
contrasts(E6B$language_evidence) <- contr.sum(2) / 2#
#
## Centering confidence and make 'choice' into factor:#
#
for (i in 1:length(obj_names)) {#
	assign(obj_names[i],#
		mutate(get(obj_names[i]),#
			confidence = confidence - mean(confidence),#
			choice = as.factor(choice)))#
	}#
#
## Analysis:#
#
summary(E1.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E1, family = 'binomial'))#
summary(E2.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E2, family = 'binomial'))#
summary(E3.mdl <- glm(choice ~ distance + confidence + experience,#
	E3, family = 'binomial'))#
summary(E4.mdl <- glm(choice ~ distance + confidence + experience +#
	room_orientation + room_orientation:distance,#
	E4, family = 'binomial'))#
summary(E5A.mdl <- glm(choice ~ distance + confidence + experience +#
	language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E5A, family = 'binomial'))#
summary(E5B.mdl <- glm(choice ~ distance + confidence + experience +#
	language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E5B, family = 'binomial'))#
summary(E6A.mdl <- glm(choice ~ distance + confidence + experience +#
	question_orientation +  language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E6A, family = 'binomial'))#
summary(E6B.mdl <- glm(choice ~ distance + confidence + experience +#
	question_orientation + language_perspective + language_evidence +#
	language_perspective:language_evidence,#
	E6B, family = 'binomial'))#
#
## Combined analysis for E5A-E6B:#
#
xdata <- cbind(data.frame(experiment = rep('E5A', nrow(E5A))),#
	select(E5A, -bias))#
xdata <- rbind(xdata,#
	cbind(data.frame(experiment = rep('E5B', nrow(E5B))), #
	select(E5B, -bias)))#
xdata <- rbind(xdata, cbind(data.frame(experiment = rep('E6A', nrow(E6A))), #
	select(E6A, -bias, -question_orientation)))#
xdata <- rbind(xdata, cbind(data.frame(experiment = rep('E6B', nrow(E6B))), #
	select(E6B, -bias, -question_orientation)))#
#
## Name the between-experiment factors:#
#
xdata$dimensionality <- '2D'#
xdata[xdata$experiment %in% c('E5A', 'E6A'), ]$dimensionality <- '3D'#
xdata$delay <- 'none'#
xdata[xdata$experiment %in% c('E6A', 'E6B'), ]$delay <- 'delayed'#
#
## Make a big analysis for everything:#
#
summary(bigmodel <- glm(choice ~ distance + confidence +#
	experience + language_perspective + #
	language_evidence + language_perspective:language_evidence +#
	dimensionality + delay +#
	dimensionality:distance + delay:distance, #
		xdata, family = 'binomial'))#
#
## Make an even bigger analysis:#
#
xdata2 <- rbind(xdata, cbind(data.frame(experiment = rep('E3', nrow(E3)), #
	E3[, c('choice', 'distance', 'confidence', 'experience')], #
	data.frame(language_perspective = rep('no_language', nrow(E3)), #
	language_evidence = rep('no_language', nrow(E3)), #
	dimensionality = rep('3D', nrow(E3)), delay = rep('none', nrow(E3))))))#
xdata2 <- rbind(xdata2, cbind(data.frame(experiment = rep('E4', nrow(E4)), #
	E4[, c('choice', 'distance', 'confidence', 'experience')], #
	data.frame(language_perspective = rep('no_language', nrow(E4)), #
	language_evidence = rep('no_language', nrow(E4)), #
	dimensionality = rep('2D', nrow(E4)), delay = rep('none', nrow(E4))))))#
#
## Make a variable for the language effect:#
#
xdata2$language <- 'no_language'#
xdata2[xdata2$experiment %in% c('E5A', 'E5B', 'E6A', 'E6B'), ]$language <- 'language'#
#
summary(bigmodel2 <- glm(choice ~ distance + confidence + experience + #
	dimensionality + delay + language + language:distance + #
	dimensionality:distance + delay:distance, #
		xdata2, family = 'binomial'))#
#
## Make a table for the overall effect:#
#
table(xdata2$choice, xdata2$distance)#
##------------------------------------------------------------------#
## Graph with averages across all effects:#
##------------------------------------------------------------------#
#
## April 23,  2015#
## Adding a graph that averages all effects#
#
## How many data points in total?#
#
sum(sapply(obj_names[-2], FUN = function(x) nrow(get(x))))	# 970#
#
## Add all on top of each other:#
#
xtab <- table(E1$distance, E1$choice)#
for (i in 1:length(obj_names[-2])) {#
	this_obj <- get(obj_names[-2][i])#
	xtab <- xtab + table(this_obj$distance, this_obj$choice)#
	}#
#
## Overall proportions:#
#
defendant_far <- xtab[1, ] / rowSums(xtab)[1]#
defendant_close <- xtab[2, ] / rowSums(xtab)[2]#
#
## Plot of this:#
#
gap_between <- 0.1#
big_gap <- 0.5#
above_factor <- 7#
quartz('', 8, 6);par(mai = c(1, 2, 1, 0.5))#
plot(1, 1, type = 'n', bty = 'n', xlim = c(0, 7), ylim = c(0, 100), xaxs = 'i', yaxs = 'i', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')#
axis(side = 2, seq(0, 100, 25), labels = paste0(seq(0, 100, 25), '%'), lwd = 4, lwd.ticks = 4, las = 2, font = 2, cex.axis = 2)#
mtext(side = 2, line = 6, text = 'Percent chosen', cex = 2.5, font = 2)#
segments(x0 = 0, x1 = 7, y0 = 0, lwd = 4, xpd = NA)#
axis(side = 1, at = c(2, 5+big_gap), labels = c('Defendant close', 'Defendant far'), cex.axis = 1.5, font = 2, tick = F)#
## left two bars#
rect(1-gap_between, 0, 2-gap_between, defendant_close[1]*100, lwd = 2, col = 'wheat3')#
text(x = mean(c(1-gap_between, 2-gap_between)), y = defendant_close[1]*100+above_factor, labels = '54%', font = 2, cex = 2)#
rect(2+gap_between, 0, 3+gap_between, defendant_close[2]*100, lwd = 2, col = 'orange3')#
text(x = mean(c(2+gap_between, 3+gap_between)), y = defendant_close[2]*100+above_factor, labels = '46%', font = 2, cex = 2)#
## right two bars#
rect(4-gap_between+big_gap, 0, 5-gap_between+big_gap, defendant_far[1]*100, lwd = 2, col = 'wheat3')#
text(x = mean(c(4-gap_between+big_gap, 5-gap_between+big_gap)), y = defendant_far[1]*100+above_factor, labels = '35%', font = 2, cex = 2)#
rect(5+gap_between+big_gap, 0, 6+gap_between+big_gap, defendant_far[2]*100, lwd = 2, col = 'orange3')#
text(x = mean(c(5+gap_between+big_gap, 6+gap_between+big_gap)), y = defendant_far[2]*100+above_factor, labels = '65%', font = 2, cex = 2, xpd = NA)#
segments(x0 = 0, x1 = 7, y0 = 0, lwd = 4, xpd = NA)#
## Add legend:#
legend('topright', pt.bg = c('wheat3', 'orange3'), legend = c('picked defendant', 'picked prosecutor'), pch = 22, cex = 1.15, pt.cex = 1.25, box.lwd = 2)
